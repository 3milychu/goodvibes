{"version":3,"file":"react-use-gesture.cjs.production.min.js","sources":["../src/utils/math.ts","../src/utils/utils.ts","../src/utils/state.ts","../src/utils/event.ts","../src/Controller.ts","../src/hooks/useRecognizers.ts","../src/recognizers/Recognizer.ts","../src/recognizers/CoordinatesRecognizer.ts","../src/recognizers/DragRecognizer.ts","../src/utils/config.ts","../src/recognizers/PinchRecognizer.ts","../src/recognizers/DistanceAngleRecognizer.ts","../src/recognizers/WheelRecognizer.ts","../src/recognizers/MoveRecognizer.ts","../src/recognizers/ScrollRecognizer.ts","../src/hooks/useGesture.ts","../src/hooks/useDrag.ts","../src/hooks/useMove.ts","../src/hooks/usePinch.ts","../src/hooks/useScroll.ts","../src/hooks/useWheel.ts"],"sourcesContent":["// vector add\nexport function addV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v + v2[i]) as T\n}\n\n// vector substract\nexport function subV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v - v2[i]) as T\n}\n/**\n * Calculates velocity\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @param len the length of the delta vector\n * @returns velocity\n */\nexport function calculateVelocity(delta: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...delta)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(delta: T, delta_t: number): T {\n  return (delta_t ? delta.map(v => v / delta_t) : Array(delta.length).fill(0)) as T\n}\n\n/**\n * Calculates distance\n * @param movement the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(movement: number[]): number {\n  return Math.hypot(...movement)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param delta\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(delta: T, len?: number): T {\n  len = len || Math.hypot(...delta) || 1\n  return delta.map(v => v / len!) as T\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param movement the difference between current and initial vectors\n * @param delta the difference between current and previous vectors\n * @param delta_t the time difference between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(movement: T, delta: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...delta)\n\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len),\n  }\n}\n\nexport function getIntentional(movement: number, threshold: number): number | false {\n  const abs = Math.abs(movement)\n  return abs >= threshold ? Math.sign(movement) * threshold : false\n}\n\nfunction minMax(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(value, max))\n}\n\n// Based on @aholachek ;)\n// https://twitter.com/chpwn/status/285540192096497664\n// iOS constant = 0.55\n\n// https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5\nfunction rubberband2(distance: number, constant: number) {\n  // default constant from the article is 0.7\n  return Math.pow(distance, constant * 5)\n}\n\nfunction rubberband(distance: number, dimension: number, constant: number) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return rubberband2(distance, constant)\n  return (distance * dimension * constant) / (dimension + constant * distance)\n}\n\nexport function rubberbandIfOutOfBounds(position: number, min: number, max: number, constant = 0.15) {\n  if (constant === 0) return minMax(position, min, max)\n\n  if (position < min) {\n    return -rubberband(min - position, max - min, constant) + min\n  }\n  if (position > max) {\n    return rubberband(position - max, max - min, constant) + max\n  }\n  return position\n}\n","import { Fn, Vector2 } from '../types'\n\n// blank function\nexport function noop() {}\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\nexport const def = {\n  array: <T>(value: T | T[]): T[] => (Array.isArray(value) ? value : [value, value]),\n  withDefault: <T>(value: T | undefined, defaultIfUndefined: T): T => (value !== void 0 ? value : defaultIfUndefined),\n}\n\nexport function matchKeysFromObject<T extends object, K extends object>(obj: T, matchingObject: K): Partial<T> {\n  const o: Partial<T> = {}\n  Object.entries(obj).forEach(\n    ([key, value]) => (value !== void 0 || key in matchingObject) && (o[key as keyof T] = value)\n  )\n  return o\n}\n\nexport function valueFn(v: Vector2 | (() => Vector2)) {\n  return typeof v === 'function' ? v() : v\n}\n","import { noop } from './utils'\nimport { CommonGestureState, Coordinates, State, DistanceAngle, Vector2 } from '../types'\n\nexport function getInitialState(): State {\n  // common initial state for all gestures\n  const initialCommon: CommonGestureState = {\n    _active: false,\n    _blocked: false,\n    _intentional: [false, false],\n    _movement: [0, 0],\n    _initial: [0, 0],\n    event: undefined,\n    // currentTarget: undefined,\n    // pointerId: undefined,\n    values: [0, 0],\n    velocities: [0, 0],\n    delta: [0, 0],\n    movement: [0, 0],\n    offset: [0, 0],\n    lastOffset: [0, 0],\n    direction: [0, 0],\n    initial: [0, 0],\n    previous: [0, 0],\n    first: false,\n    last: false,\n    active: false,\n    timeStamp: 0,\n    startTime: 0,\n    elapsedTime: 0,\n    cancel: noop,\n    canceled: false,\n    memo: undefined,\n    args: undefined,\n  }\n\n  // initial state for coordinates-based gestures\n  const initialCoordinates: Coordinates = {\n    axis: undefined,\n    xy: [0, 0] as Vector2,\n    vxvy: [0, 0] as Vector2,\n    velocity: 0,\n    distance: 0,\n  }\n\n  // initial state for distance and angle-based gestures (pinch)\n  const initialDistanceAngle: DistanceAngle = {\n    da: [0, 0] as Vector2,\n    vdva: [0, 0] as Vector2,\n    origin: undefined,\n    turns: 0,\n  }\n\n  // initial state object (used by the gesture controller)\n  return {\n    shared: {\n      hovering: false,\n      scrolling: false,\n      wheeling: false,\n      dragging: false,\n      moving: false,\n      pinching: false,\n      touches: 0,\n      buttons: 0,\n      down: false,\n      shiftKey: false,\n      altKey: false,\n      metaKey: false,\n      ctrlKey: false,\n    },\n    drag: {\n      ...initialCommon,\n      ...initialCoordinates,\n      _isTap: true,\n      _delayedEvent: false,\n      tap: false,\n      swipe: [0, 0],\n    },\n    pinch: { ...initialCommon, ...initialDistanceAngle },\n    wheel: { ...initialCommon, ...initialCoordinates },\n    move: { ...initialCommon, ...initialCoordinates },\n    scroll: { ...initialCommon, ...initialCoordinates },\n  }\n}\n","import { Fn, EventOptions, UseGestureEvent, Vector2, WebKitGestureEvent } from '../types'\n\nconst isBrowser = typeof window !== 'undefined'\n\nexport const supportsTouchEvents = () => isBrowser && window.ontouchstart === null\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([eventName, fn]) => el[action](eventName, fn, options))\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function gestureEventSupported(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: no type definitions for webkit GestureEvents\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: UseGestureEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\n\nfunction getTouchEvents(event: UseGestureEvent) {\n  if ('touches' in event) {\n    const { touches, changedTouches } = event\n    return touches.length > 0 ? touches : changedTouches\n  }\n  return null\n}\n\nexport function getGenericEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent) {\n  const buttons = 'buttons' in event ? event.buttons : 0\n  const touchEvents = getTouchEvents(event)\n  const touches = (touchEvents && touchEvents.length) || 0\n  const down = touches > 0 || buttons > 0\n  return { touches, down, buttons, ...getModifierKeys(event) }\n}\n\ntype Values = { values: Vector2 }\n\n/**\n * Gets scroll event values\n * @param event\n * @returns scroll event values\n */\nexport function getScrollEventValues(event: UseGestureEvent): Values {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = event.currentTarget as Element & Window\n  return { values: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0] }\n}\n\n/**\n * Gets wheel event values.\n * @param event\n * @returns wheel event values\n */\nexport function getWheelEventValues(event: UseGestureEvent<React.WheelEvent>): Values {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { values: [deltaX, deltaY] }\n}\n\n/**\n * Gets pointer event values.\n * @param event\n * @returns pointer event values\n */\nexport function getPointerEventValues(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): Values {\n  const touchEvents = getTouchEvents(event)\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : (event as React.PointerEvent)\n  return { values: [clientX, clientY] }\n}\n\nconst WEBKIT_DISTANCE_SCALE_FACTOR = 260\n\n/**\n * Gets webkit gesture event values.\n * @param event\n * @returns webkit gesture event values\n */\nexport function getWebkitGestureEventValues(event: WebKitGestureEvent): Values {\n  return { values: [event.scale * WEBKIT_DISTANCE_SCALE_FACTOR, event.rotation] as Vector2 }\n}\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent) {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const values: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { values, origin }\n}\n","import {\n  StateKey,\n  State,\n  Fn,\n  ReactEventHandlerKey,\n  ReactEventHandlers,\n  InternalConfig,\n  InternalHandlers,\n} from './types'\nimport { getInitialState } from './utils/state'\nimport { addListeners, removeListeners } from './utils/event'\nimport { chainFns } from './utils/utils'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] }>\n\n/**\n * The controller will keep track of the state for all gestures and also keep\n * track of timeouts, and window listeners.\n *\n * @template BinderType the type the bind function should return\n */\nexport default class Controller {\n  public config!: InternalConfig\n  public handlers!: Partial<InternalHandlers>\n  public state: State = getInitialState() // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n\n  /**\n   * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.\n   */\n  public clean = (): void => {\n    this.resetBindings()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(stateKey as StateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render).\n   * Resets the binding object and remove dom listeners attached to config.domTarget\n   */\n  public resetBindings = (): void => {\n    this.bindings = {}\n    const domTarget = this.getDomTarget()\n    if (domTarget) {\n      removeListeners(domTarget, this.domListeners, this.config.eventOptions)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Returns the domTarget element and parses a ref if needed.\n   */\n  private getDomTarget = (): EventTarget | null | undefined => {\n    const { domTarget } = this.config\n    return domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window.\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.eventOptions)\n  }\n\n  /**\n   * Commodity function to let recognizers simply remove listeners to config.window.\n   */\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.eventOptions)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  public addDomTargetListeners = (target: EventTarget): void => {\n    /** We iterate on the entries of this.binding for each event, then we chain\n     * the array of functions mapped to it and push them to this.domListeners\n     */\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(fns as Fn[]))])\n    })\n\n    addListeners(target, this.domListeners, this.config.eventOptions)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys.\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  public addBindings = (eventNames: ReactEventHandlerKey | ReactEventHandlerKey[], fn: Fn): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n    eventNamesArray.forEach(eventName => {\n      if (this.bindings[eventName]) this.bindings[eventName]!.push(fn)\n      else this.bindings[eventName] = [fn]\n    })\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with.\n   */\n  public getBindings = (): ReactEventHandlers => {\n    const bindings: ReactEventHandlers = {}\n    const { captureString } = this.config\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      bindings[key] = chainFns(...(fnsArray as Fn[]))\n    })\n\n    return bindings\n  }\n\n  public getBind = () => {\n    // If config.domTarget is set we add event listeners to it and return the clean function.\n    if (this.config.domTarget) {\n      const domTarget = this.getDomTarget()\n      domTarget && this.addDomTargetListeners(domTarget)\n      return this.clean\n    }\n\n    // If not, we return an object that contains gesture handlers mapped to react handler event keys.\n    return this.getBindings()\n  }\n}\n","import React from 'react'\nimport Controller from '../Controller'\nimport {\n  InternalConfig,\n  HookReturnType,\n  InternalHandlers,\n  RecognizerClasses,\n  GenericOptions,\n  NativeHandlersPartial,\n  ReactEventHandlerKey,\n  Fn,\n} from '../types'\n/**\n * @private\n *\n * Utility hook called by all gesture hooks and that will be responsible for the internals.\n *\n * @param {Partial<InternalHandlers>} handlers\n * @param {RecognizerClasses} classes\n * @param {InternalConfig} config\n * @param {NativeHandlersPartial} nativeHandlers - native handlers such as onClick, onMouseDown, etc.\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport default function useRecognizers<Config extends Partial<GenericOptions>>(\n  handlers: Partial<InternalHandlers>,\n  classes: RecognizerClasses,\n  config: InternalConfig,\n  nativeHandlers?: NativeHandlersPartial\n): (...args: any[]) => HookReturnType<Config> {\n  const controller = React.useRef<Controller>() // The gesture controller keeping track of all gesture states\n  const nativeRefs = React.useRef<NativeHandlersPartial>()\n\n  if (!controller.current) {\n    // We only initialize the gesture controller once\n    controller.current = new Controller()\n  }\n\n  // We reassign the config and handlers to the controller on every render.\n  controller.current!.config = config\n  controller.current!.handlers = handlers\n\n  /**\n   * We also assign nativeHandlers to a ref, otherwise it they won't be refreshed\n   * on the next render.\n   */\n  nativeRefs.current = nativeHandlers\n\n  /**\n   * When the component unmounts, we run the controller clean functions that will be responsible\n   * for removing listeners, clearing timeouts etc.\n   */\n  React.useEffect(() => controller.current!.clean, [])\n\n  /**\n   * The bind function will create gesture recognizers and return the right\n   * bind object depending on whether `domTarget` was specified in the config object.\n   */\n  const [bind] = React.useState(() => (...args: any[]) => {\n    controller.current!.resetBindings()\n    classes.forEach(RecognizerClass => {\n      const recognizer = new RecognizerClass(controller.current!, args)\n      recognizer.addBindings()\n    })\n\n    if (nativeRefs.current) {\n      // we also add event bindings for native handlers\n      Object.entries(nativeRefs.current).forEach(([eventName, fn]) => {\n        // we're cheating when it comes to event type :(\n        controller.current!.addBindings(eventName as ReactEventHandlerKey, fn as Fn)\n      })\n    }\n\n    return controller.current!.getBind() as HookReturnType<Config>\n  })\n\n  return bind\n}\n","import Controller from '../Controller'\nimport {\n  StateKey,\n  GestureKey,\n  SharedGestureState,\n  Fn,\n  UseGestureEvent,\n  IngKey,\n  InternalConfig,\n  Handler,\n  GestureState,\n  PartialGestureState,\n  Vector2,\n  FalseOrNumber,\n  FullGestureState,\n} from '../types'\nimport { getInitialState } from '../utils/state'\nimport { subV, addV, getIntentional, rubberbandIfOutOfBounds } from '../utils/math'\nimport { valueFn } from '../utils/utils'\n\n/**\n * @private\n * Recognizer abstract class.\n *\n * @protected\n * @abstract\n * @type {StateKey<T>} whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<T extends GestureKey> {\n  protected abstract stateKey: StateKey<T> // the state key used by the recognizer (the same as gesture key for all gestures but hover)\n  protected abstract ingKey: IngKey // dragging, scrolling, etc.\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param gestureKey drag, move, hover, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly gestureKey: T,\n    protected readonly controller: Controller,\n    protected readonly args: any[] = []\n  ) {}\n\n  // Returns the gesture config\n  protected get config(): NonNullable<InternalConfig[T]> {\n    return this.controller.config[this.gestureKey]!\n  }\n\n  // Is the gesture enabled\n  protected get enabled(): boolean {\n    return this.controller.config.enabled && this.config.enabled\n  }\n\n  // Returns the controller state for a given gesture\n  protected get state(): GestureState<T> {\n    return this.controller.state[this.stateKey]\n  }\n\n  // Returns the gesture handler\n  protected get handler(): Handler<T> {\n    return this.controller.handlers[this.gestureKey] as Handler<T>\n  }\n\n  // Conveninence method to update the shared state\n  protected updateSharedState(sharedState: Partial<SharedGestureState> | null) {\n    Object.assign(this.controller.state.shared, sharedState)\n  }\n\n  // Conveninence method to update the gesture state\n  protected updateGestureState(gestureState: PartialGestureState<T> | null) {\n    Object.assign(this.state, gestureState)\n  }\n\n  // Convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // Convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // Convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // Convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  /**\n   * Utility function to get kinematics of the gesture.\n   *\n   * @abstract\n   * @values - values we want to calculate the kinematics from\n   * @event - the pointer event\n   * @returns - set of values including movement, velocity, velocities, distance and direction\n   */\n  protected abstract getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T>\n\n  protected abstract mapStateValues(state: GestureState<T>): PartialGestureState<T>\n\n  // Should return the bindings to be added for a given gesture\n  public abstract addBindings(): void\n\n  /**\n   * Returns a generic, common payload for all gestures from an event.\n   *\n   * @param {UseGestureEvent} event\n   * @param {boolean} [isStartEvent]\n   * @returns - the generic gesture payload\n   */\n  protected getGenericPayload(event: UseGestureEvent, isStartEvent?: boolean) {\n    const { timeStamp } = event\n    const { values, startTime } = this.state\n\n    return {\n      event,\n      timeStamp,\n      elapsedTime: isStartEvent ? 0 : timeStamp - startTime!,\n      args: this.args,\n      previous: values,\n    }\n  }\n  /**\n   * Returns the reinitialized start state for the gesture.\n   * Should be common to all gestures.\n   *\n   * @param {Vector2} values\n   * @param {UseGestureEvent} event\n   * @returns - the start state for the gesture\n   */\n  protected getStartGestureState = (values: Vector2, event: UseGestureEvent) => {\n    return {\n      ...getInitialState()[this.stateKey],\n      _active: true,\n      values,\n      initial: values,\n      offset: this.state.offset,\n      lastOffset: this.state.offset,\n      startTime: event.timeStamp,\n    }\n  }\n\n  /**\n   * Returns state properties depending on the movement and state.\n   *\n   * Should be overriden for custom behavior, doesn't do anything in the implementation\n   * below.\n   */\n  protected checkIntentionality(\n    _intentional: [FalseOrNumber, FalseOrNumber],\n    _movement: Vector2,\n    _state: PartialGestureState<T>\n  ): PartialGestureState<T> {\n    return { _intentional, _blocked: false } as PartialGestureState<T>\n  }\n\n  protected abstract getInternalMovement(values: Vector2, state: GestureState<T>): Vector2\n\n  /**\n   * Returns basic movement properties for the gesture based on the next values and current state.\n   */\n  protected getMovement(values: Vector2, state: GestureState<T> = this.state): PartialGestureState<T> {\n    const { initial, threshold, rubberband } = this.config\n\n    const [t0, t1] = threshold\n\n    const { _initial, _active, _intentional: intentional, lastOffset, movement: prevMovement } = state\n    let [i0, i1] = intentional\n\n    const [_m0, _m1] = this.getInternalMovement(values, state)\n\n    /**\n     * For both dimensions of the gesture, check its intentionality on each frame.\n     */\n    if (i0 === false) {\n      i0 = getIntentional(_m0, t0)\n    }\n    if (i1 === false) {\n      i1 = getIntentional(_m1, t1)\n    }\n\n    // Get gesture specific state properties based on intentionality and movement.\n    const intentionalityCheck = this.checkIntentionality([i0, i1], [_m0, _m1], state)\n\n    const { _intentional, _blocked } = intentionalityCheck\n    const [_i0, _i1] = _intentional!\n    const _movement = [_m0, _m1]\n\n    if (_i0 !== false && intentional[0] === false) _initial[0] = valueFn(initial)[0]\n    if (_i1 !== false && intentional[1] === false) _initial[1] = valueFn(initial)[1]\n\n    /**\n     * If the gesture has been blocked (from gesture specific checkIntentionality),\n     * stop right there.\n     */\n    if (_blocked) return { ...intentionalityCheck, _movement }\n\n    /**\n     * The movement sent to the handler has 0 in its dimensions when intentionality is false.\n     * It is calculated from the actual movement minus the threshold.\n     */\n    let movement = [\n      _i0 !== false ? _m0 - _i0 : valueFn(initial)[0],\n      _i1 !== false ? _m1 - _i1 : valueFn(initial)[1],\n    ] as Vector2\n    const offset = addV(movement, lastOffset)\n\n    /**\n     * Rubberband should be 0 when the gesture is no longer active, so that movement\n     * and offset can return within their bounds.\n     */\n    const _rubberband: Vector2 = _active ? rubberband : [0, 0]\n    movement = this.rubberband(addV(movement, _initial), _rubberband) // rubberbanded movement\n\n    return {\n      ...intentionalityCheck,\n      _initial,\n      _movement,\n      movement,\n      offset: this.rubberband(offset, _rubberband), // rubberbanded offset\n      delta: subV(movement, prevMovement),\n    } as PartialGestureState<T>\n  }\n\n  // Runs rubberband on a vector\n  protected rubberband = (vector: Vector2, rubberband: Vector2): Vector2 => {\n    const { bounds } = this.config\n\n    /**\n     * [x, y]: [rubberband(x, min, max), rubberband(y, min, max)]\n     */\n    return vector.map((v, i) => rubberbandIfOutOfBounds(v, bounds[i][0], bounds[i][1], rubberband[i])) as Vector2\n  }\n\n  // Cleans the gesture. Can be overriden by gestures.\n  protected clean() {\n    this.clearTimeout()\n    this.removeWindowListeners()\n  }\n\n  /**\n   * Fires the gesture handler\n   *\n   * @param {boolean} [forceFlag] - if true, then the handler will fire even if the gesture is not intentional\n   */\n  protected fireGestureHandler = (forceFlag?: boolean): FullGestureState<T> | null => {\n    /**\n     * If the gesture has been blocked (this can happen when the gesture has started in an unwanted direction),\n     * clean everything and don't do anything.\n     */\n    if (this.state._blocked) {\n      this.state._active = false\n      this.clean()\n      return null\n    }\n\n    // If the gesture has no intentional dimension, don't do fire the handler.\n    const [intentionalX, intentionalY] = this.state._intentional\n    if (!forceFlag && intentionalX === false && intentionalY === false) return null\n\n    const { _active, active } = this.state\n\n    this.state.active = _active\n    this.state.first = _active && !active // `first` is true when the gesture becomes active\n    this.state.last = !_active // `last` is true when the gesture becomes inactive\n\n    this.controller.state.shared[this.ingKey] = _active // Sets dragging, pinching, etc. to the gesture active state\n\n    const state = {\n      ...this.controller.state.shared,\n      ...this.state,\n      ...this.mapStateValues(this.state), // Sets xy or da to the gesture state values\n    }\n\n    const newMemo = this.handler(state)\n\n    // Sets memo to the returned value of the handler (unless it's not undefined)\n    this.state.memo = newMemo !== void 0 ? newMemo : this.state.memo\n\n    // Cleans the gesture when the gesture is no longer active.\n    if (!_active) this.clean()\n\n    return state\n  }\n}\n","import Recognizer from './Recognizer'\nimport { calculateAllKinematics, subV } from '../utils/math'\nimport { Vector2, UseGestureEvent, PartialGestureState, FalseOrNumber, GestureState, CoordinatesKey } from '../types'\n\n/**\n * @private\n * Abstract class for coordinates-based gesture recongizers\n * @abstract\n * @class CoordinatesRecognizer\n * @extends {Recognizer<T>}\n * @template T\n */\nexport default abstract class CoordinatesRecognizer<T extends CoordinatesKey> extends Recognizer<T> {\n  /**\n   * Returns the real movement (without taking intentionality into acount)\n   */\n  protected getInternalMovement(values: Vector2, state: GestureState<T>): Vector2 {\n    return subV(values, state.initial)\n  }\n\n  /**\n   * In coordinates-based gesture, this function will detect the first intentional axis,\n   * lock the gesture axis if lockDirection is specified in the config, block the gesture\n   * if the first intentional axis doesn't match the specified axis in config.\n   *\n   * @param {[FalseOrNumber, FalseOrNumber]} _intentional\n   * @param {Vector2} _movement\n   * @param {PartialGestureState<T>} state\n   */\n  protected checkIntentionality(\n    _intentional: [FalseOrNumber, FalseOrNumber],\n    _movement: Vector2,\n    state: PartialGestureState<T>\n  ): PartialGestureState<T> {\n    let [_ix, _iy] = _intentional\n    const intentionalMovement = _ix !== false || _iy !== false\n    let { axis } = state\n    let _blocked = false\n\n    // If the movement is intentional, we can compute axis.\n    if (intentionalMovement) {\n      const [absX, absY] = _movement.map(Math.abs)\n\n      const { axis: configAxis, lockDirection } = this.config\n\n      // We make sure we only set axis value if it hadn't been detected before.\n      axis = axis || (absX > absY ? 'x' : absX < absY ? 'y' : undefined)\n      if (!!configAxis || lockDirection) {\n        if (!!axis) {\n          // If the detected axis doesn't match the config axis we block the gesture\n          if (!!configAxis && axis !== configAxis) _blocked = true\n          else {\n            // Otherwise we prevent the gesture from updating the unwanted axis.\n            const lockedIndex = axis === 'x' ? 1 : 0\n            _intentional![lockedIndex] = false\n          }\n        } else {\n          // Until we've detected the axis, we prevent the hnadler from updating.\n          _intentional = [false, false]\n        }\n      }\n    }\n\n    return { _intentional, _blocked, axis } as PartialGestureState<T>\n  }\n\n  getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T> {\n    const { timeStamp } = this.state\n\n    const movementDetection = this.getMovement(values, this.state)\n    const { _blocked, delta, movement } = movementDetection\n\n    if (_blocked) return movementDetection\n\n    const delta_t = event.timeStamp - timeStamp!\n    const kinematics = calculateAllKinematics(movement!, delta!, delta_t)\n\n    return {\n      values,\n      delta,\n      ...movementDetection,\n      ...kinematics,\n    }\n  }\n\n  protected mapStateValues(state: GestureState<T>): PartialGestureState<T> {\n    return { xy: state.values, vxvy: state.velocities } as PartialGestureState<T>\n  }\n}\n","import { PointerEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, Fn, StateKey, IngKey } from '../types'\nimport { noop } from '../utils/utils'\nimport { getPointerEventValues, getGenericEventData, supportsTouchEvents } from '../utils/event'\nimport { calculateDistance } from '../utils/math'\n\nconst TAP_DISTANCE_THRESHOLD = 3\nconst SWIPE_MAX_ELAPSED_TIME = 220\n\nexport default class DragRecognizer extends CoordinatesRecognizer<'drag'> {\n  stateKey = 'drag' as StateKey<'drag'>\n  ingKey = 'dragging' as IngKey\n\n  constructor(controller: Controller, args: any[]) {\n    super('drag', controller, args)\n  }\n\n  private dragShouldStart = (event: UseGestureEvent) => {\n    const { touches } = getGenericEventData(event)\n    return this.enabled && touches < 2\n  }\n\n  private setPointers = (event: UseGestureEvent) => {\n    const { currentTarget, pointerId } = event as PointerEvent\n    // @ts-ignore\n    if (currentTarget) currentTarget.setPointerCapture(pointerId)\n    this.updateGestureState({ currentTarget, pointerId })\n  }\n\n  private removePointers = () => {\n    const { currentTarget, pointerId } = this.state\n    // @ts-ignore\n    if (currentTarget) currentTarget.releasePointerCapture(pointerId)\n  }\n\n  private setListeners = () => {\n    this.removeWindowListeners()\n    const dragListeners: [string, Fn][] = supportsTouchEvents()\n      ? [\n          ['touchmove', this.onDragChange],\n          ['touchend', this.onDragEnd],\n          ['touchcancel', this.onDragEnd],\n        ]\n      : [\n          ['mousemove', this.onDragChange],\n          ['mouseup', this.onDragEnd],\n        ]\n    this.addWindowListeners(dragListeners)\n  }\n\n  onDragStart = (event: UseGestureEvent): void => {\n    if (!this.dragShouldStart(event)) return\n    // if pointers events\n    if (this.controller.config.pointer) this.setPointers(event)\n    else this.setListeners()\n\n    if (this.config.delay > 0) {\n      this.state._delayedEvent = true\n      if (typeof event.persist === 'function') event.persist()\n      this.setTimeout(() => this.startDrag(event), this.config.delay)\n    } else {\n      this.startDrag(event)\n    }\n  }\n\n  startDrag(event: UseGestureEvent) {\n    const { values } = getPointerEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onDragChange = (event: UseGestureEvent): void => {\n    const { canceled } = this.state\n    if (canceled) return\n\n    if (!this.state._active) {\n      if (this.state._delayedEvent) {\n        this.clearTimeout()\n        this.startDrag(event)\n      }\n      return\n    }\n\n    const genericEventData = getGenericEventData(event)\n\n    if (!genericEventData.down) {\n      this.onDragEnd(event)\n      return\n    }\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getPointerEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    let { _isTap } = this.state\n    if (_isTap && calculateDistance(kinematics._movement!) >= TAP_DISTANCE_THRESHOLD) _isTap = false\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      _isTap,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onDragEnd = (event: UseGestureEvent): void => {\n    this.state._active = false\n    this.updateSharedState({ down: false, buttons: 0, touches: 0 })\n\n    const {\n      _isTap,\n      values,\n      velocities: [vx, vy],\n      movement: [mx, my],\n      _intentional: [ix, iy],\n    } = this.state\n\n    const endState = {\n      ...this.getGenericPayload(event),\n      ...this.getMovement(values),\n    }\n\n    const { elapsedTime } = endState\n\n    const {\n      swipeVelocity: [svx, svy],\n      swipeDistance: [sx, sy],\n    } = this.config\n\n    const swipe: [number, number] = [0, 0]\n\n    if (elapsedTime < SWIPE_MAX_ELAPSED_TIME) {\n      if (ix !== false && Math.abs(vx) > svx && Math.abs(mx) > sx) swipe[0] = Math.sign(vx)\n      if (iy !== false && Math.abs(vy) > svy && Math.abs(my) > sy) swipe[1] = Math.sign(vy)\n    }\n\n    this.updateGestureState({\n      event,\n      ...endState,\n      tap: _isTap,\n      swipe,\n    })\n    this.fireGestureHandler(this.config.filterTaps && this.state._isTap)\n  }\n\n  clean = (): void => {\n    super.clean()\n    this.state._delayedEvent = false\n\n    if (this.controller.config.pointer) this.removePointers()\n  }\n\n  onCancel = (): void => {\n    this.updateGestureState({ canceled: true, cancel: noop })\n    this.state._active = false\n    this.updateSharedState({ down: false, buttons: 0, touches: 0 })\n    requestAnimationFrame(() => this.fireGestureHandler())\n  }\n\n  addBindings(): void {\n    if (this.controller.config.pointer) {\n      this.controller.addBindings('onPointerDown', this.onDragStart)\n      this.controller.addBindings('onPointerMove', this.onDragChange)\n      this.controller.addBindings(['onPointerUp', 'onPointerCancel'], this.onDragEnd)\n    } else {\n      if (supportsTouchEvents()) this.controller.addBindings('onTouchStart', this.onDragStart)\n      else this.controller.addBindings('onMouseDown', this.onDragStart)\n    }\n  }\n}\n","import { def, matchKeysFromObject } from './utils'\nimport {\n  Vector2,\n  GenericOptions,\n  InternalGenericOptions,\n  DragConfig,\n  Tuple,\n  GestureOptions,\n  DragOptions,\n  InternalDragOptions,\n  InternalGestureOptions,\n  CoordinatesConfig,\n  CoordinatesOptions,\n  InternalCoordinatesOptions,\n  DistanceAngleConfig,\n  InternalDistanceAngleOptions,\n} from '../types'\n\nconst DEFAULT_DRAG_DELAY = 180\nconst DEFAULT_RUBBERBAND = 0.15\n\nfunction getWindow() {\n  return typeof window !== 'undefined' ? window : undefined\n}\n\n/**\n * @private\n *\n * Returns the internal generic option object.\n *\n * @param {Partial<GenericOptions>} [config={}]\n * @returns {InternalGenericOptions}\n */\nexport function getInternalGenericOptions(config: Partial<GenericOptions> = {}): InternalGenericOptions {\n  const defaultOptions: GenericOptions = {\n    domTarget: undefined,\n    eventOptions: { passive: true, capture: false, pointer: false },\n    window: getWindow(),\n    enabled: true,\n  }\n\n  const { eventOptions: defaultEventOptions, window: defaultWindow, ...restDefault } = defaultOptions\n  const { eventOptions, window, ...restConfig } = config\n  const { passive, capture, pointer } = { ...defaultEventOptions, ...eventOptions }\n\n  return {\n    ...restDefault,\n    ...restConfig,\n    window: window || defaultWindow,\n    // passive is always true if there's no domTarget\n    eventOptions: { passive: !config.domTarget || !!passive, capture: !!capture },\n    captureString: capture ? 'Capture' : '',\n    pointer: !!pointer,\n  }\n}\n\nexport function getInternalGestureOptions(gestureConfig: Partial<GestureOptions>): InternalGestureOptions {\n  const defaultGestureOptions: GestureOptions = {\n    enabled: true,\n    initial: [0, 0],\n    threshold: undefined,\n    rubberband: 0,\n  }\n\n  const config = { ...defaultGestureOptions, ...gestureConfig }\n  let { threshold, rubberband, enabled, initial } = config\n\n  if (typeof rubberband === 'boolean') rubberband = rubberband ? DEFAULT_RUBBERBAND : 0\n  if (threshold === void 0) threshold = 0\n\n  return {\n    enabled,\n    initial,\n    threshold: def.array(threshold) as Vector2,\n    rubberband: def.array(rubberband) as Vector2,\n  }\n}\n\nexport function getInternalCoordinatesOptions(coordinatesConfig: CoordinatesConfig = {}): InternalCoordinatesOptions {\n  const defaultCoordinatesOptions: CoordinatesOptions = {\n    lockDirection: false,\n    axis: undefined,\n    bounds: undefined,\n  }\n\n  const { axis, lockDirection, bounds = {}, ...internalOptions } = coordinatesConfig\n\n  const boundsArray = [\n    [def.withDefault(bounds.left, -Infinity), def.withDefault(bounds.right, Infinity)],\n    [def.withDefault(bounds.top, -Infinity), def.withDefault(bounds.bottom, Infinity)],\n  ]\n\n  return {\n    ...getInternalGestureOptions(internalOptions),\n    ...defaultCoordinatesOptions,\n    ...matchKeysFromObject({ axis, lockDirection }, coordinatesConfig),\n    bounds: boundsArray as Tuple<Vector2>,\n  }\n}\n\nexport function getInternalDistanceAngleOptions(\n  distanceAngleConfig: DistanceAngleConfig = {}\n): InternalDistanceAngleOptions {\n  const { distanceBounds = {}, angleBounds = {}, ...internalOptions } = distanceAngleConfig\n\n  const boundsArray = [\n    [def.withDefault(distanceBounds.min, -Infinity), def.withDefault(distanceBounds.max, Infinity)],\n    [def.withDefault(angleBounds.min, -Infinity), def.withDefault(angleBounds.max, Infinity)],\n  ]\n\n  return {\n    ...getInternalGestureOptions(internalOptions),\n    bounds: boundsArray as Tuple<Vector2>,\n  }\n}\n\nexport function getInternalDragOptions(dragConfig: DragConfig = {}): InternalDragOptions {\n  const defaultDragOptions: DragOptions = {\n    filterTaps: false,\n    swipeVelocity: 0.5,\n    swipeDistance: 60,\n    delay: false,\n  }\n\n  let { enabled, threshold, bounds, rubberband, initial, ...dragOptions } = dragConfig\n  let { swipeVelocity, swipeDistance, delay, filterTaps, axis, lockDirection } = {\n    ...defaultDragOptions,\n    ...dragOptions,\n  }\n\n  if (threshold === void 0) {\n    threshold = Math.max(0, filterTaps ? 3 : 0, lockDirection || axis ? 1 : 0)\n  } else {\n    filterTaps = true\n  }\n\n  const internalCoordinatesOptions = getInternalCoordinatesOptions(\n    matchKeysFromObject({ enabled, threshold, bounds, rubberband, axis, lockDirection, initial }, dragConfig)\n  )\n\n  return {\n    ...internalCoordinatesOptions,\n    filterTaps: filterTaps || internalCoordinatesOptions.threshold[0] + internalCoordinatesOptions.threshold[1] > 0,\n    swipeVelocity: def.array(swipeVelocity) as Vector2,\n    swipeDistance: def.array(swipeDistance) as Vector2,\n    delay: typeof delay === 'number' ? delay : delay ? DEFAULT_DRAG_DELAY : 0,\n  }\n}\n","import { TouchEvent, WheelEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, StateKey, IngKey, Vector2, WebKitGestureEvent } from '../types'\nimport { noop } from '../utils/utils'\nimport {\n  getGenericEventData,\n  getTwoTouchesEventData,\n  getWheelEventValues,\n  gestureEventSupported,\n  getWebkitGestureEventValues,\n} from '../utils/event'\n\nexport default class PinchRecognizer extends DistanceAngleRecognizer<'pinch'> {\n  stateKey = 'pinch' as StateKey<'pinch'>\n  ingKey = 'pinching' as IngKey\n\n  constructor(controller: Controller, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  private pinchShouldStart = (event: UseGestureEvent) => {\n    const { touches } = getGenericEventData(event)\n    return this.enabled && touches === 2\n  }\n\n  onPinchStart = (event: UseGestureEvent<TouchEvent>) => {\n    if (!this.pinchShouldStart(event)) return\n\n    const { values, origin } = getTwoTouchesEventData(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      origin,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onPinchChange = (event: UseGestureEvent<TouchEvent>): void => {\n    const { canceled, timeStamp, _active } = this.state\n    if (canceled || !_active) return\n    const genericEventData = getGenericEventData(event)\n    if (genericEventData.touches !== 2 || event.timeStamp === timeStamp) return\n\n    this.updateSharedState(genericEventData)\n\n    const { values, origin } = getTwoTouchesEventData(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      origin,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onPinchEnd = (event: UseGestureEvent): void => {\n    this.state._active = false\n    this.updateSharedState({ down: false, touches: 0 })\n\n    this.updateGestureState({\n      event,\n      ...this.getGenericPayload(event),\n      ...this.getMovement(this.state.values),\n    })\n    this.fireGestureHandler()\n  }\n\n  onCancel = (): void => {\n    this.state._active = false\n    this.updateGestureState({ canceled: true, cancel: noop })\n    this.updateSharedState({ down: false, touches: 0 })\n\n    requestAnimationFrame(() => this.fireGestureHandler())\n  }\n  /**\n   * PINCH WITH WEBKIT GESTURES\n   */\n\n  onGestureStart = (event: WebKitGestureEvent): void => {\n    if (!this.enabled) return\n    event.preventDefault()\n\n    const { values } = getWebkitGestureEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onGestureChange = (event: WebKitGestureEvent): void => {\n    const { canceled, _active } = this.state\n    if (canceled || !_active) return\n\n    event.preventDefault()\n\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getWebkitGestureEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onGestureEnd = (event: WebKitGestureEvent): void => {\n    event.preventDefault()\n    this.state._active = false\n    this.updateSharedState({ down: false, touches: 0 })\n\n    this.updateGestureState({\n      event,\n      ...this.getGenericPayload(event),\n      ...this.getMovement(this.state.values),\n    })\n    this.fireGestureHandler()\n  }\n\n  updateTouchData = (event: UseGestureEvent<TouchEvent>): void => {\n    if (!this.enabled || event.touches.length !== 2) return\n    const { origin } = getTwoTouchesEventData(event)\n    this.state.origin = origin\n  }\n\n  /**\n   * PINCH WITH WHEEL\n   */\n  private wheelShouldRun = (event: UseGestureEvent<WheelEvent>) => {\n    return this.enabled && event.ctrlKey\n  }\n\n  private getWheelValuesFromEvent = (event: UseGestureEvent<WheelEvent>) => {\n    const {\n      values: [, delta_d],\n    } = getWheelEventValues(event)\n    const {\n      values: [prev_d, prev_a],\n    } = this.state\n    const d = prev_d - delta_d\n    const a = prev_a !== void 0 ? prev_a : 0\n\n    return {\n      values: [d, a] as Vector2,\n      origin: [event.clientX, event.clientY] as Vector2,\n      delta: [0, delta_d] as Vector2,\n    }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (!this.wheelShouldRun(event)) return\n    this.clearTimeout()\n    this.setTimeout(this.onWheelEnd)\n\n    if (!this.state._active) this.onWheelStart(event)\n    else this.onWheelChange(event)\n  }\n\n  onWheelStart = (event: UseGestureEvent<WheelEvent>): void => {\n    const { values, delta, origin } = this.getWheelValuesFromEvent(event)\n\n    if (!this.controller.config.eventOptions.passive) {\n      event.preventDefault()\n    } else if (process.env.NODE_ENV === 'development') {\n      console.warn(\n        'To support zoom on trackpads, try using the `domTarget` option and `config.event.passive` set to `false`. This message will only appear in development mode.'\n      )\n    }\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n      initial: this.state.values,\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      offset: values,\n      delta,\n      origin,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelChange = (event: UseGestureEvent<WheelEvent>): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values, origin, delta } = this.getWheelValuesFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      origin,\n      delta,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState(this.getMovement(this.state.values))\n    this.fireGestureHandler()\n  }\n\n  addBindings(): void {\n    if (gestureEventSupported()) {\n      this.controller.addBindings('onGestureStart', this.onGestureStart)\n      this.controller.addBindings('onGestureChange', this.onGestureChange)\n      this.controller.addBindings(['onGestureEnd', 'onTouchCancel'], this.onGestureEnd)\n      this.controller.addBindings(['onTouchStart', 'onTouchMove'], this.updateTouchData)\n    } else {\n      this.controller.addBindings('onTouchStart', this.onPinchStart)\n      this.controller.addBindings('onTouchMove', this.onPinchChange)\n      this.controller.addBindings(['onTouchEnd', 'onTouchCancel'], this.onPinchEnd)\n\n      this.controller.addBindings('onWheel', this.onWheel)\n    }\n  }\n}\n","import Recognizer from './Recognizer'\nimport { calculateAllKinematics } from '../utils/math'\nimport { Vector2, UseGestureEvent, PartialGestureState, DistanceAngleKey, GestureState } from '../types'\n\n/**\n * @private\n * Abstract class for distance/angle-based gesture recongizers\n * @abstract\n * @class DistanceAngleRecognizer\n * @extends {Recognizer<T>}\n * @template T\n */\nexport default abstract class DistanceAngleRecognizer<T extends DistanceAngleKey> extends Recognizer<T> {\n  /**\n   * Returns the real movement (without taking intentionality into acount)\n   */\n  protected getInternalMovement([d, a]: [number, number?], state: GestureState<T>): Vector2 {\n    const { values: da, turns, initial } = state\n\n    // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n    a = a !== void 0 ? a : da[1]\n\n    let delta_a = a - da[1]\n\n    /**\n     * The angle value might jump from 179deg to -179deg when we actually want to\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\n     * is supsiciously high (ie > 270deg) and increase the `turns` value\n     */\n    const newTurns = Math.abs(delta_a) > 270 ? turns + Math.sign(delta_a) : turns\n\n    // we update the angle difference to its corrected value\n\n    const movement_d = d - initial[0]\n    const movement_a = a - 360 * newTurns - initial[1]\n    return [movement_d, movement_a]\n  }\n\n  getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T> {\n    const { timeStamp, initial } = this.state\n\n    const movementDetection = this.getMovement(values, this.state)\n    const { delta, movement } = movementDetection\n\n    const turns = (values[1] - movement![1] - initial[1]) / 360\n\n    const delta_t = event.timeStamp - timeStamp!\n    const kinematics = calculateAllKinematics(movement!, delta!, delta_t)\n\n    return {\n      values,\n      delta,\n      turns,\n      ...movementDetection,\n      ...kinematics,\n    }\n  }\n\n  protected mapStateValues(state: GestureState<T>): PartialGestureState<T> {\n    return { da: state.values, vdva: state.velocities } as PartialGestureState<T>\n  }\n}\n","import { WheelEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, StateKey, IngKey } from '../types'\nimport { getWheelEventValues, getGenericEventData } from '../utils/event'\nimport { addV, calculateDistance, calculateDirection } from '../utils/math'\n\nexport default class WheelRecognizer extends CoordinatesRecognizer<'wheel'> {\n  stateKey = 'wheel' as StateKey<'wheel'>\n  ingKey = 'wheeling' as IngKey\n\n  constructor(controller: Controller, args: any[]) {\n    super('wheel', controller, args)\n  }\n\n  private wheelShouldRun = (event: UseGestureEvent<WheelEvent>) => {\n    if (event.ctrlKey && 'pinch' in this.controller.handlers) return false\n    return this.enabled\n  }\n\n  private getValuesFromEvent = (event: UseGestureEvent<WheelEvent>) => {\n    const { values: prevValues } = this.state\n    const { values } = getWheelEventValues(event)\n    return { values: addV(values, prevValues) }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (!this.wheelShouldRun(event)) return\n    this.clearTimeout()\n    this.setTimeout(this.onWheelEnd)\n\n    if (!this.state._active) this.onWheelStart(event)\n    else this.onWheelChange(event)\n  }\n\n  onWheelStart = (event: UseGestureEvent<WheelEvent>): void => {\n    const { values } = this.getValuesFromEvent(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n      initial: this.state.values,\n    }\n\n    const movementDetection = this.getMovement(values, startState)\n    const delta = movementDetection.delta!\n\n    this.updateGestureState({\n      ...startState,\n      ...movementDetection,\n      distance: calculateDistance(delta),\n      direction: calculateDirection(delta),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelChange = (event: UseGestureEvent<WheelEvent>): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = this.getValuesFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState({ ...this.getMovement(this.state.values), velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  addBindings(): void {\n    this.controller.addBindings('onWheel', this.onWheel)\n  }\n}\n","import {} from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, StateKey, IngKey } from '../types'\nimport { getGenericEventData, getPointerEventValues } from '../utils/event'\n\nexport default class MoveRecognizer extends CoordinatesRecognizer<'move'> {\n  stateKey = 'move' as StateKey<'move'>\n  ingKey = 'moving' as IngKey\n\n  constructor(controller: Controller, args: any[]) {\n    super('move', controller, args)\n  }\n\n  private moveShouldRun = () => {\n    return this.enabled\n  }\n\n  onMove = (event: UseGestureEvent): void => {\n    if (!this.moveShouldRun()) return\n    this.clearTimeout()\n    this.setTimeout(this.onMoveEnd)\n\n    if (!this.state._active) this.onMoveStart(event)\n    else this.onMoveChange(event)\n  }\n\n  onMoveStart = (event: UseGestureEvent): void => {\n    const { values } = getPointerEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onMoveChange = (event: UseGestureEvent): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getPointerEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onMoveEnd = (): void => {\n    this.state._active = false\n\n    this.updateGestureState({ ...this.getMovement(this.state.values), velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  onPointerEnter = (event: UseGestureEvent): void => {\n    if (!this.controller.config.enabled || !this.controller.config.hover!.enabled) return\n    if ('move' in this.controller.handlers) this.onMoveStart(event)\n\n    this.controller.state.shared.hovering = true\n    const { values } = getPointerEventValues(event)\n\n    const state = {\n      ...this.controller.state.shared,\n      ...this.state,\n      ...this.getGenericPayload(event, true),\n      values,\n      active: true,\n      hovering: true,\n    }\n\n    this.controller.handlers.hover!({ ...state, ...this.mapStateValues(state) })\n  }\n\n  onPointerLeave = (event: UseGestureEvent): void => {\n    if ('move' in this.controller.handlers) this.onMoveEnd()\n\n    this.controller.state.shared.hovering = false\n\n    const { values } = getPointerEventValues(event)\n\n    const state = {\n      ...this.controller.state.shared,\n      ...this.state,\n      ...this.getGenericPayload(event),\n      values,\n      active: false,\n    }\n\n    this.controller.handlers.hover!({ ...state, ...this.mapStateValues(state) })\n  }\n\n  addBindings(): void {\n    if (this.controller.config.pointer) {\n      if ('move' in this.controller.handlers) {\n        this.controller.addBindings('onPointerMove', this.onMove)\n      }\n      if ('hover' in this.controller.handlers) {\n        this.controller.addBindings('onPointerEnter', this.onPointerEnter)\n        this.controller.addBindings('onPointerLeave', this.onPointerLeave)\n      }\n    } else {\n      if ('move' in this.controller.handlers) {\n        this.controller.addBindings('onMouseMove', this.onMove)\n      }\n      if ('hover' in this.controller.handlers) {\n        this.controller.addBindings('onMouseEnter', this.onPointerEnter)\n        this.controller.addBindings('onMouseLeave', this.onPointerLeave)\n      }\n    }\n  }\n}\n","import {} from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, StateKey, IngKey } from '../types'\nimport { getGenericEventData, getScrollEventValues } from '../utils/event'\nimport { calculateDistance, calculateDirection } from '../utils/math'\n\nexport default class ScrollRecognizer extends CoordinatesRecognizer<'scroll'> {\n  stateKey = 'scroll' as StateKey<'scroll'>\n  ingKey = 'scrolling' as IngKey\n\n  constructor(controller: Controller, args: any[]) {\n    super('scroll', controller, args)\n  }\n\n  private scrollShouldRun = () => {\n    return this.enabled\n  }\n\n  onScroll = (event: UseGestureEvent): void => {\n    if (!this.scrollShouldRun()) return\n    this.clearTimeout()\n    this.setTimeout(this.onScrollEnd)\n\n    if (!this.state._active) this.onScrollStart(event)\n    else this.onScrollChange(event)\n  }\n\n  onScrollStart = (event: UseGestureEvent): void => {\n    const { values } = getScrollEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n      initial: this.state.values,\n    }\n\n    const movementDetection = this.getMovement(values, startState)\n    const delta = movementDetection.delta!\n\n    this.updateGestureState({\n      ...startState,\n      ...movementDetection,\n      distance: calculateDistance(delta),\n      direction: calculateDirection(delta),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onScrollChange = (event: UseGestureEvent): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getScrollEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onScrollEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState({ ...this.getMovement(this.state.values), velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  addBindings(): void {\n    this.controller.addBindings('onScroll', this.onScroll)\n  }\n}\n","import React from 'react'\nimport useRecognizers from './useRecognizers'\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport {\n  getInternalGenericOptions,\n  getInternalDragOptions,\n  getInternalCoordinatesOptions,\n  getInternalDistanceAngleOptions,\n} from '../utils/config'\nimport {\n  InternalConfig,\n  HandlerKey,\n  UserHandlersPartial,\n  InternalHandlers,\n  UserHandlers,\n  RecognizerClasses,\n  UseGestureConfig,\n  HookReturnType,\n} from '../types'\n\n/**\n * @public\n *\n * The most complete gesture hook, allowing support for multiple gestures.\n *\n * @param {UserHandlersPartial} handlers - an object with on[Gesture] keys containg gesture handlers\n * @param {UseGestureConfig} [config={}] - the full config object\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useGesture<Config extends UseGestureConfig>(\n  handlers: UserHandlersPartial,\n  config: UseGestureConfig = {}\n): (...args: any[]) => HookReturnType<Config> {\n  /**\n   * If handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n   * actions will include 'onDrag' and 'onMove.\n   */\n  const [actions] = React.useState(() => new Set(Object.keys(handlers).map(k => k.replace(/End|Start/, ''))))\n\n  /**\n   * Here we compute the derived internal config based on the provided config object.\n   * We decompose the config into its generic and gesture options and compute each.\n   * TODO: this is currently done on every render!\n   */\n  const { drag, wheel, move, scroll, pinch, hover, ...restConfig } = config\n\n  const mergedConfig: InternalConfig = getInternalGenericOptions(restConfig)\n\n  const classes: RecognizerClasses = []\n  const internalHandlers: Partial<InternalHandlers> = {}\n\n  // will hold reference to native handlers such as onClick, onMouseDown, etc.\n  const _nativeHandlers = { ...handlers }\n\n  if (actions.has('onDrag')) {\n    classes.push(DragRecognizer)\n    internalHandlers.drag = includeStartEndHandlers(handlers, 'onDrag', _nativeHandlers)\n    mergedConfig.drag = getInternalDragOptions(drag)\n  }\n  if (actions.has('onWheel')) {\n    classes.push(WheelRecognizer)\n    internalHandlers.wheel = includeStartEndHandlers(handlers, 'onWheel', _nativeHandlers)\n    mergedConfig.wheel = getInternalCoordinatesOptions(wheel)\n  }\n  if (actions.has('onScroll')) {\n    classes.push(ScrollRecognizer)\n    internalHandlers.scroll = includeStartEndHandlers(handlers, 'onScroll', _nativeHandlers)\n    mergedConfig.scroll = getInternalCoordinatesOptions(scroll)\n  }\n  if (actions.has('onMove')) {\n    classes.push(MoveRecognizer)\n    internalHandlers.move = includeStartEndHandlers(handlers, 'onMove', _nativeHandlers)\n    mergedConfig.move = getInternalCoordinatesOptions(move)\n  }\n  if (actions.has('onPinch')) {\n    classes.push(PinchRecognizer)\n    internalHandlers.pinch = includeStartEndHandlers(handlers, 'onPinch', _nativeHandlers)\n    mergedConfig.pinch = getInternalDistanceAngleOptions(pinch)\n  }\n  if (actions.has('onHover')) {\n    if (!actions.has('onMove')) classes.push(MoveRecognizer)\n    internalHandlers.hover = handlers.onHover\n    mergedConfig.hover = { enabled: true, ...hover }\n    delete _nativeHandlers.onHover\n  }\n\n  return useRecognizers<Config>(internalHandlers, classes, mergedConfig, _nativeHandlers)\n}\n/**\n * @private\n *\n * This utility function will integrate start and end handlers into the regular\n * handler function by using first and last conditions.\n *\n * @param {UserHandlersPartial} handlers - the handlers function object\n * @param {HandlerKey} handlerKey - the key for which to integrate start and end handlers\n * @returns\n */\nfunction includeStartEndHandlers(\n  handlers: UserHandlersPartial,\n  handlerKey: HandlerKey,\n  _nativeHandlers: UserHandlersPartial\n) {\n  const startKey = (handlerKey + 'Start') as keyof UserHandlers\n  const endKey = (handlerKey + 'End') as keyof UserHandlers\n\n  delete _nativeHandlers[handlerKey]\n  delete _nativeHandlers[startKey]\n  delete _nativeHandlers[endKey]\n\n  const fn = (state: any) => {\n    let memo: any = undefined\n    if (state.first && startKey in handlers) handlers[startKey]!(state)\n    if (handlerKey in handlers) memo = handlers[handlerKey]!(state)\n    if (state.last && endKey in handlers) handlers[endKey]!(state)\n    return memo\n  }\n  return fn\n}\n","import useRecognizers from './useRecognizers'\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseDragConfig } from '../types'\nimport { getInternalGenericOptions, getInternalDragOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Drag hook.\n *\n * @param {Handler<'drag'>} handler - the function fired every time the drag gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and drag options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useDrag<Config extends UseDragConfig>(\n  handler: Handler<'drag'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...drag } = config as UseDragConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    drag: getInternalDragOptions(drag),\n  }\n\n  return useRecognizers<Config>({ drag: handler }, [DragRecognizer], mergedConfig)\n}\n","import useRecognizers from './useRecognizers'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseMoveConfig } from '../types'\nimport { getInternalGenericOptions, getInternalCoordinatesOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Moveok.\n *\n * @param {Handler<'move'>} handler - the function fired every time the move gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and move options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useMove<Config extends UseMoveConfig>(\n  handler: Handler<'move'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...move } = config as UseMoveConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    move: getInternalCoordinatesOptions(move),\n  }\n\n  return useRecognizers<Config>({ move: handler }, [MoveRecognizer], mergedConfig)\n}\n","import useRecognizers from './useRecognizers'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UsePinchConfig } from '../types'\nimport { getInternalGenericOptions, getInternalDistanceAngleOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Pinch hook.\n *\n * @param {Handler<'pinch'>} handler - the function fired every time the pinch gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and pinch options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function usePinch<Config extends UsePinchConfig>(\n  handler: Handler<'pinch'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...pinch } = config as UsePinchConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    pinch: getInternalDistanceAngleOptions(pinch),\n  }\n\n  return useRecognizers<Config>({ pinch: handler }, [PinchRecognizer], mergedConfig)\n}\n","import useRecognizers from './useRecognizers'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseScrollConfig } from '../types'\nimport { getInternalGenericOptions, getInternalCoordinatesOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Scroll hook.\n *\n * @param {Handler<'scroll'>} handler - the function fired every time the scroll gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and scroll options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useScroll<Config extends UseScrollConfig>(\n  handler: Handler<'scroll'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...scroll } = config as UseScrollConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    scroll: getInternalCoordinatesOptions(scroll),\n  }\n\n  return useRecognizers<Config>({ scroll: handler }, [ScrollRecognizer], mergedConfig)\n}\n","import useRecognizers from './useRecognizers'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseWheelConfig } from '../types'\nimport { getInternalGenericOptions, getInternalCoordinatesOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Wheel hook.\n *\n * @param {Handler<'wheel'>} handler - the function fired every time the wheel gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and wheel options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useWheel<Config extends UseWheelConfig>(\n  handler: Handler<'wheel'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...wheel } = config as UseWheelConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    wheel: getInternalCoordinatesOptions(wheel),\n  }\n\n  return useRecognizers<Config>({ wheel: handler }, [WheelRecognizer], mergedConfig)\n}\n"],"names":["addV","v1","v2","map","v","i","subV","calculateVelocity","delta","delta_t","len","Math","hypot","calculateVelocities","Array","length","fill","calculateDistance","movement","calculateDirection","calculateAllKinematics","velocities","velocity","distance","direction","getIntentional","threshold","abs","sign","rubberband","dimension","constant","Infinity","pow","rubberband2","rubberbandIfOutOfBounds","position","min","max","value","minMax","noop","chainFns","fns","args","forEach","fn","def","array","isArray","withDefault","defaultIfUndefined","matchKeysFromObject","obj","matchingObject","o","Object","entries","key","valueFn","getInitialState","initialCommon","_active","_blocked","_intentional","_movement","_initial","event","undefined","values","offset","lastOffset","initial","previous","first","last","active","timeStamp","startTime","elapsedTime","cancel","canceled","memo","initialCoordinates","axis","xy","vxvy","shared","hovering","scrolling","wheeling","dragging","moving","pinching","touches","buttons","down","shiftKey","altKey","metaKey","ctrlKey","drag","_isTap","_delayedEvent","tap","swipe","pinch","da","vdva","origin","turns","wheel","move","scroll","isBrowser","window","supportsTouchEvents","ontouchstart","setListeners","add","el","listeners","options","action","addListeners","removeListeners","getTouchEvents","changedTouches","getGenericEventData","touchEvents","getModifierKeys","getScrollEventValues","currentTarget","scrollX","scrollLeft","scrollY","scrollTop","getWheelEventValues","deltaX","deltaY","getPointerEventValues","clientX","clientY","WEBKIT_DISTANCE_SCALE_FACTOR","getWebkitGestureEventValues","scale","rotation","getTwoTouchesEventData","dx","dy","atan2","PI","Controller","_this","resetBindings","timeouts","clearTimeout","keys","windowListeners","stateKey","removeWindowListeners","bindings","domTarget","getDomTarget","domListeners","config","eventOptions","current","target","push","substr","toLowerCase","eventNames","eventName","captureString","fnsArray","addDomTargetListeners","clean","getBindings","useRecognizers","handlers","classes","nativeHandlers","controller","React","useRef","nativeRefs","useEffect","useState","RecognizerClass","addBindings","getBind","Recognizer","gestureKey","callback","ms","setTimeout","addWindowListeners","state","vector","bounds","forceFlag","ingKey","mapStateValues","newMemo","handler","updateSharedState","sharedState","assign","this","updateGestureState","gestureState","getGenericPayload","isStartEvent","checkIntentionality","_state","getMovement","t0","t1","intentional","prevMovement","i0","i1","getInternalMovement","_m0","_m1","intentionalityCheck","_i0","_i1","_rubberband","enabled","CoordinatesRecognizer","absX","absY","configAxis","lockDirection","getKinematics","movementDetection","TAP_DISTANCE_THRESHOLD","SWIPE_MAX_ELAPSED_TIME","DragRecognizer","pointerId","setPointerCapture","releasePointerCapture","dragListeners","onDragChange","onDragEnd","dragShouldStart","pointer","setPointers","delay","persist","startDrag","genericEventData","kinematics","onCancel","fireGestureHandler","vx","vy","mx","my","ix","iy","endState","swipeVelocity","svx","svy","swipeDistance","sx","sy","filterTaps","removePointers","requestAnimationFrame","startState","getStartGestureState","_this2","onDragStart","DEFAULT_DRAG_DELAY","DEFAULT_RUBBERBAND","getWindow","getInternalGenericOptions","defaultOptions","passive","capture","defaultEventOptions","defaultWindow","restDefault","restConfig","getInternalGestureOptions","gestureConfig","getInternalCoordinatesOptions","coordinatesConfig","internalOptions","boundsArray","left","right","top","bottom","getInternalDistanceAngleOptions","distanceAngleConfig","distanceBounds","angleBounds","getInternalDragOptions","dragConfig","internalCoordinatesOptions","PinchRecognizer","pinchShouldStart","preventDefault","delta_d","prev_a","wheelShouldRun","onWheelEnd","onWheelChange","onWheelStart","getWheelValuesFromEvent","GestureEvent","e","gestureEventSupported","onPinchStart","onPinchChange","onPinchEnd","onWheel","onGestureStart","onGestureChange","onGestureEnd","updateTouchData","d","a","delta_a","newTurns","WheelRecognizer","prevValues","getValuesFromEvent","MoveRecognizer","moveShouldRun","onMoveEnd","onMoveChange","onMoveStart","hover","onMove","onPointerEnter","onPointerLeave","ScrollRecognizer","scrollShouldRun","onScrollEnd","onScrollChange","onScrollStart","onScroll","includeStartEndHandlers","handlerKey","_nativeHandlers","startKey","endKey","mergedConfig","actions","Set","k","replace","internalHandlers","has","onHover"],"mappings":"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"}