{"ast":null,"code":"var _jsxFileName = \"/Users/emilychu/Desktop/goodvibes/src/components/Swipe-Card.js\";\nimport React from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport Instructions from './Instructions';\nimport * as d3 from \"d3\";\nimport data from './../data/data.csv';\nimport levels from './../data/levels.csv';\nimport ConfettiGenerator from \"confetti-js\";\nimport LevelUp from './LevelUp';\nlet dataset = [];\nlet game_levels = [];\nconst wrapperStyle = {\n  backgroundColor: \"transparent\",\n  width: \"100%\",\n  height: \"70vh\",\n  marginBottom: \"5%\"\n};\nconst colors = [\"f15a22\", \"ab4a9c\", \"0083ca\", \"2e3192\", \"ff4469\", \"6279ff\", \"ffcbb5\", \"998783\", \"edb86c\", \"ed6d6c\", \"4bba8d\", \"a0597e\", \"b3e1ed\", \"19c2ed\", \"54ceed\", \"22c1c3\", \"fdbb2d\"];\n\nclass SwipeCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      score: 0,\n      current_badge: \"\",\n      next_badge: \"\",\n      color: \"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n    };\n  }\n\n  onSwipe(data) {}\n\n  onSwipeRight(data) {\n    let points = Math.floor(Math.random() * 100) + 20;\n    this.setState({\n      score: this.state.score += points\n    });\n    let random_color1 = Math.floor(Math.random() * colors.length) + 0;\n    let random_color2 = Math.floor(Math.random() * colors.length) + 0;\n    let new_color = \"linear-gradient(73deg, #\" + colors[random_color1] + \" 0%, #\" + colors[random_color2] + \" 100%)\";\n    this.setState({\n      color: new_color\n    });\n    let counter = this.state.score;\n    console.log(counter);\n    const filteredLevels = game_levels.filter(x => counter >= x.points);\n    const maxPoint = Math.max.apply(Math, filteredLevels.map(p => p.points));\n    var current_level = filteredLevels.find(y => y.points >= maxPoint);\n    current_level = current_level.badge;\n    this.setState({\n      current_badge: current_level\n    });\n    let current_level_index = game_levels.findIndex(d => d.badge === current_level);\n    let next_level = game_levels[current_level_index + 1]['badge'];\n    this.setState({\n      next_badge: next_level\n    });\n    console.log(this.state.current_badge, this.state.next_badge);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.current_badge !== this.state.current_badge) {\n      // show popup\n      var popup = document.querySelector('.popup');\n      popup.style.display = \"flex\"; // play confetti\n\n      const confettiSettings = {\n        target: 'confetti'\n      };\n      const confetti = new ConfettiGenerator(confettiSettings);\n      confetti.render(); // clear alerts\n\n      setTimeout(function () {\n        confetti.clear();\n        var popup = document.querySelector('.popup');\n        console.log(popup);\n        popup.style.display = \"none\";\n      }, 3000);\n    }\n  }\n\n  componentDidMount() {\n    let random;\n    const self = this;\n    d3.csv(data).then(data => {\n      dataset.push(data);\n      dataset = dataset[0];\n      random = Math.floor(Math.random() * data.length) + 0;\n      self.setState({\n        data: data[random]\n      });\n    });\n\n    function callback(data) {\n      this.setState({\n        data: data[random]\n      });\n    }\n\n    d3.csv(data).then(callback.bind(this));\n    d3.csv(levels).then(data => {\n      game_levels.push(data);\n      game_levels = game_levels[0];\n      this.setState({\n        current_badge: data[0]['badge']\n      });\n      this.setState({\n        next_badge: data[1]['badge']\n      });\n    });\n  }\n\n  renderCards() {\n    const self = this;\n    const cardStyle = {\n      backgroundColor: \"#f2f2f2\",\n      width: \"70%\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: \"5%\",\n      background: this.state.color,\n      color: \"white\",\n      height: \"60%\",\n      borderRadius: \"1em\",\n      transform: \"scale(1) translateY(0px)!important\",\n      fontSize: \"2em\",\n      fontFamily: \"Helvetica-Neue, sans-serif\",\n      fontWeight: \"800\"\n    };\n\n    if (dataset != undefined) {\n      return dataset.map((d, index) => {\n        return React.createElement(Card, {\n          style: cardStyle,\n          key: index,\n          onSwipe: this.onSwipeRight.bind(this),\n          onSwipeRight: this.onSwipeRight.bind(this),\n          data: d,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, d.quote);\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      id: \"counter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.state.score), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"pts\")), React.createElement(CardWrapper, {\n      style: wrapperStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.renderCards()), React.createElement(Instructions, {\n      current_badge: this.state.current_badge,\n      next_badge: this.state.next_badge,\n      text: \"Swipe right for more good vibes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(LevelUp, {\n      current_badge: this.state.current_badge,\n      next_badge: this.state.next_badge,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SwipeCard;","map":{"version":3,"sources":["/Users/emilychu/Desktop/goodvibes/src/components/Swipe-Card.js"],"names":["React","Card","CardWrapper","Instructions","d3","data","levels","ConfettiGenerator","LevelUp","dataset","game_levels","wrapperStyle","backgroundColor","width","height","marginBottom","colors","SwipeCard","Component","state","score","current_badge","next_badge","color","onSwipe","onSwipeRight","points","Math","floor","random","setState","random_color1","length","random_color2","new_color","counter","console","log","filteredLevels","filter","x","maxPoint","max","apply","map","p","current_level","find","y","badge","current_level_index","findIndex","d","next_level","componentDidUpdate","prevProps","prevState","popup","document","querySelector","style","display","confettiSettings","target","confetti","render","setTimeout","clear","componentDidMount","self","csv","then","push","callback","bind","renderCards","cardStyle","justifyContent","alignItems","padding","background","borderRadius","transform","fontSize","fontFamily","fontWeight","undefined","index","quote"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport Instructions from './Instructions'\nimport * as d3 from \"d3\";\nimport data from './../data/data.csv';\nimport levels from './../data/levels.csv';\nimport ConfettiGenerator from \"confetti-js\";\nimport LevelUp from './LevelUp'\n\nlet dataset=[]\nlet game_levels=[]\nconst wrapperStyle = {\n  backgroundColor: \"transparent\",\n  width:\"100%\",\n  height:\"70vh\",\n  marginBottom:\"5%\"\n}\nconst colors = [\"f15a22\", \"ab4a9c\", \"0083ca\", \"2e3192\", \"ff4469\", \"6279ff\", \n\"ffcbb5\", \"998783\", \"edb86c\",\"ed6d6c\", \"4bba8d\", \"a0597e\", \"b3e1ed\", \"19c2ed\", \"54ceed\", \n\"22c1c3\", \"fdbb2d\"]\n\nclass SwipeCard extends React.Component {\n  state = {\n    data: [],\n    score: 0,\n    current_badge:\"\",\n    next_badge:\"\",\n    color:\"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n  };\n  onSwipe(data) {\n  }\n  onSwipeRight(data) {\n    let points =  Math.floor(Math.random()*100)+20\n    this.setState({score: this.state.score +=points})\n\n    let random_color1 = Math.floor(Math.random()*colors.length)+0\n     let random_color2 = Math.floor(Math.random()*colors.length)+0\n    let new_color = \"linear-gradient(73deg, #\"+colors[random_color1]+\" 0%, #\"+colors[random_color2]+\" 100%)\"\n    this.setState({color: new_color})\n\n    let counter = this.state.score\n    console.log(counter)\n    const filteredLevels = game_levels.filter(x=> counter >= x.points);\n    const maxPoint = Math.max.apply(Math, filteredLevels.map(p=> p.points));\n    var current_level = filteredLevels.find(y=> y.points >= maxPoint); \n    current_level = current_level.badge\n    this.setState({current_badge:current_level})\n    let current_level_index = game_levels.findIndex(d => d.badge === current_level)\n    let next_level = game_levels[current_level_index+1]['badge']\n    this.setState({next_badge:next_level})\n    console.log(this.state.current_badge, this.state.next_badge)\n  }\n\ncomponentDidUpdate(prevProps, prevState) {\n  if (prevState.current_badge !== this.state.current_badge) {\n    // show popup\n   var popup = document.querySelector('.popup')\n   popup.style.display=\"flex\"\n\n    // play confetti\n    const confettiSettings = { target: 'confetti' };\n    const confetti = new ConfettiGenerator(confettiSettings);\n    confetti.render();\n\n    // clear alerts\n    setTimeout(function() {\n      confetti.clear();\n      var popup = document.querySelector('.popup')\n      console.log(popup)\n      popup.style.display=\"none\"\n    },3000)\n  }\n}\n\ncomponentDidMount() {\n  let random;\n  const self = this;\n\n  d3.csv(data).then((data)=> {\n  dataset.push(data)\n   dataset = dataset[0]\n  random = Math.floor(Math.random()*data.length)+0\n    self.setState({ data: data[random] });\n  });\n\n  function callback(data) {\n    this.setState({ data: data[random] });\n  }\n\n  d3.csv(data).then(callback.bind(this));\n\n  d3.csv(levels).then((data)=> {\n    game_levels.push(data)\n    game_levels = game_levels[0]\n      this.setState({ current_badge: data[0]['badge'] });\n      this.setState({ next_badge: data[1]['badge'] });\n  });\n  }\n  renderCards() {\n    const self = this;\n    const cardStyle = {\n      backgroundColor: \"#f2f2f2\",\n      width:\"70%\",\n      display:\"flex\",\n      justifyContent:\"center\",\n      alignItems:\"center\",\n      padding:\"5%\",\n      background: this.state.color,\n      color:\"white\",\n      height:\"60%\",\n      borderRadius:\"1em\",\n      transform:\"scale(1) translateY(0px)!important\",\n      fontSize:\"2em\",\n      fontFamily:\"Helvetica-Neue, sans-serif\",\n      fontWeight:\"800\"\n    }\n\n    if(dataset!=undefined){\n    return dataset.map((d,index) => {\n      return(\n        <Card\n          style={cardStyle}\n          key={index}\n          onSwipe={this.onSwipeRight.bind(this)}\n          onSwipeRight={this.onSwipeRight.bind(this)}\n          data={d}>\n            {d.quote}\n        </Card>\n      );\n    });\n    }\n\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <div className=\"score\">\n          <h2 id='counter'>{this.state.score}</h2><h2>pts</h2>\n        </div>\n       <CardWrapper style={wrapperStyle}>\n        {this.renderCards()}\n      </CardWrapper>\n      <Instructions current_badge={this.state.current_badge} next_badge={this.state.next_badge} text=\"Swipe right for more good vibes\"/>\n      <LevelUp current_badge={this.state.current_badge} next_badge={this.state.next_badge} />\n      </React.Fragment>\n      )\n  }\n}\n\nexport default SwipeCard"]},"metadata":{},"sourceType":"module"}