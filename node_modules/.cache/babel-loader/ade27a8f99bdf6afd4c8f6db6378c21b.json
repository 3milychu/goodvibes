{"ast":null,"code":"var _jsxFileName = \"/Users/emilychu/Desktop/goodvibes/src/components/Swipe-Card.js\";\nimport React from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport Instructions from './Instructions';\nimport * as d3 from \"d3\";\nimport data from './../data/data.csv';\nimport levels from './../data/levels.csv';\nlet dataset = [];\nlet cardset = [];\nlet game_levels = [];\nconst wrapperStyle = {\n  backgroundColor: \"transparent\",\n  width: \"100%\",\n  height: \"70vh\",\n  marginBottom: \"5%\"\n};\nconst colors = [\"f15a22\", \"ab4a9c\", \"0083ca\", \"2e3192\", \"ff4469\", \"6279ff\", \"ffcbb5\", \"998783\", \"edb86c\", \"ed6d6c\", \"4bba8d\", \"a0597e\", \"b3e1ed\", \"19c2ed\", \"54ceed\", \"22c1c3\", \"fdbb2d\"];\n\nclass SwipeCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      score: 0,\n      current_badge: \"\",\n      next_badge: \"\",\n      color: \"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n    };\n  }\n\n  renderCards() {\n    const self = this;\n    const cardStyle = {\n      backgroundColor: \"#f2f2f2\",\n      width: \"70%\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: \"5%\",\n      background: this.state.color,\n      color: \"white\",\n      height: \"60%\",\n      borderRadius: \"1em\"\n    };\n    console.log(dataset);\n    return cardset.map((d, i) => {\n      return React.createElement(Card, {\n        style: cardStyle,\n        key: this.state.data.key,\n        onSwipeRight: this.refresh.bind(this),\n        data: d,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this.state.data.quote));\n    });\n  }\n\n  onSwipe(data) {}\n\n  onSwipeRight(data) {}\n\n  refresh() {\n    let random;\n    let points = Math.floor(Math.random() * 100) + 20;\n    const self = this;\n    d3.csv(data).then(data => {\n      dataset.push(data);\n      random = Math.floor(Math.random() * data.length) + 0;\n      self.setState({\n        data: data[random]\n      });\n    });\n\n    function callback(data) {\n      this.setState({\n        data: data[random]\n      });\n      let cardset = dataset[0];\n    }\n\n    d3.csv(data).then(callback.bind(this));\n    this.setState({\n      score: this.state.score += points\n    }); // console.log(this.state.score)\n\n    let random_color1 = Math.floor(Math.random() * colors.length) + 0;\n    let random_color2 = Math.floor(Math.random() * colors.length) + 0;\n    let new_color = \"linear-gradient(73deg, #\" + colors[random_color1] + \" 0%, #\" + colors[random_color2] + \" 100%)\"; // console.log(new_color)\n\n    this.setState({\n      color: new_color\n    });\n  }\n\n  componentDidMount() {\n    let random;\n    const self = this;\n    d3.csv(data).then(data => {\n      dataset.push(data);\n      random = Math.floor(Math.random() * data.length) + 0;\n      self.setState({\n        data: data[random]\n      });\n    });\n\n    function callback(data) {\n      this.setState({\n        data: data[random]\n      });\n      let cardset = dataset[0];\n    }\n\n    d3.csv(data).then(callback.bind(this));\n    d3.csv(levels).then(data => {\n      game_levels.push(data);\n      this.setState({\n        current_badge: data[0]['badge']\n      });\n      this.setState({\n        next_badge: data[1]['badge']\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      id: \"counter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, this.state.score), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"pts\")), React.createElement(CardWrapper, {\n      style: wrapperStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.renderCards()), React.createElement(Instructions, {\n      current_badge: this.state.current_badge,\n      next_badge: this.state.next_badge,\n      text: \"Swipe right for more good vibes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SwipeCard;","map":{"version":3,"sources":["/Users/emilychu/Desktop/goodvibes/src/components/Swipe-Card.js"],"names":["React","Card","CardWrapper","Instructions","d3","data","levels","dataset","cardset","game_levels","wrapperStyle","backgroundColor","width","height","marginBottom","colors","SwipeCard","Component","state","score","current_badge","next_badge","color","renderCards","self","cardStyle","display","justifyContent","alignItems","padding","background","borderRadius","console","log","map","d","i","key","refresh","bind","quote","onSwipe","onSwipeRight","random","points","Math","floor","csv","then","push","length","setState","callback","random_color1","random_color2","new_color","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport Instructions from './Instructions'\nimport * as d3 from \"d3\";\nimport data from './../data/data.csv';\nimport levels from './../data/levels.csv';\n\nlet dataset=[]\nlet cardset=[]\nlet game_levels=[]\nconst wrapperStyle = {\n  backgroundColor: \"transparent\",\n  width:\"100%\",\n  height:\"70vh\",\n  marginBottom:\"5%\"\n}\nconst colors = [\"f15a22\", \"ab4a9c\", \"0083ca\", \"2e3192\", \"ff4469\", \"6279ff\", \n\"ffcbb5\", \"998783\", \"edb86c\",\"ed6d6c\", \"4bba8d\", \"a0597e\", \"b3e1ed\", \"19c2ed\", \"54ceed\", \n\"22c1c3\", \"fdbb2d\"]\n\nclass SwipeCard extends React.Component {\n  state = {\n    data: [],\n    score: 0,\n    current_badge:\"\",\n    next_badge:\"\",\n    color:\"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n  };\n  renderCards() {\n    const self = this;\n    const cardStyle = {\n      backgroundColor: \"#f2f2f2\",\n      width:\"70%\",\n      display:\"flex\",\n      justifyContent:\"center\",\n      alignItems:\"center\",\n      padding:\"5%\",\n      background: this.state.color,\n      color:\"white\",\n      height:\"60%\",\n      borderRadius:\"1em\"\n    }\n\n    console.log(dataset)\n\n    return cardset.map((d,i) => {\n      return(\n        <Card\n          style={cardStyle}\n          key={this.state.data.key}\n          onSwipeRight={this.refresh.bind(this)}\n          data={d}>\n            <h1>{this.state.data.quote}</h1>\n        </Card>\n      );\n    });\n  }\n  onSwipe(data) {\n  }\n  onSwipeRight(data) {\n  }\n\nrefresh() {\n    let random;\n    let points =  Math.floor(Math.random()*100)+20\n    const self = this;\n\n    d3.csv(data).then((data)=> {\n    dataset.push(data)\n    random = Math.floor(Math.random()*data.length)+0\n      self.setState({ data: data[random] });\n    });\n\n    function callback(data) {\n      this.setState({ data: data[random] });\n       let cardset=dataset[0]\n    }\n\n    d3.csv(data).then(callback.bind(this));\n\n    this.setState({score: this.state.score +=points})\n\n    // console.log(this.state.score)\n\n    let random_color1 = Math.floor(Math.random()*colors.length)+0\n     let random_color2 = Math.floor(Math.random()*colors.length)+0\n    let new_color = \"linear-gradient(73deg, #\"+colors[random_color1]+\" 0%, #\"+colors[random_color2]+\" 100%)\"\n    // console.log(new_color)\n    this.setState({color: new_color})\n  }\n\ncomponentDidMount() {\n  let random;\n  const self = this;\n\n  d3.csv(data).then((data)=> {\n  dataset.push(data)\n  random = Math.floor(Math.random()*data.length)+0\n    self.setState({ data: data[random] });\n  });\n\n  function callback(data) {\n    this.setState({ data: data[random] });\n    let cardset=dataset[0]\n  }\n\n  d3.csv(data).then(callback.bind(this));\n\n  d3.csv(levels).then((data)=> {\n    game_levels.push(data)\n      this.setState({ current_badge: data[0]['badge'] });\n      this.setState({ next_badge: data[1]['badge'] });\n  });\n  }\n\n\n\n  render() {\n    return(\n      <React.Fragment>\n        <div className=\"score\">\n          <h2 id='counter'>{this.state.score}</h2><h2>pts</h2>\n        </div>\n       <CardWrapper style={wrapperStyle}>\n        {this.renderCards()}\n      </CardWrapper>\n      <Instructions current_badge={this.state.current_badge} next_badge={this.state.next_badge} text=\"Swipe right for more good vibes\"/>\n      </React.Fragment>\n      )\n  }\n}\n\nexport default SwipeCard"]},"metadata":{},"sourceType":"module"}