{"ast":null,"code":"var _jsxFileName = \"/Users/emilychu/Desktop/goodvibes/src/components/Swipe-Card.js\";\nimport React from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport * as d3 from \"d3\";\nimport data from './../data/data.csv';\nimport levels from './../data/levels.csv';\nlet dataset = [];\nconst wrapperStyle = {\n  backgroundColor: \"transparent\"\n};\nconst cardStyle = {\n  backgroundColor: \"#f2f2f2\",\n  width: \"100%\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  padding: \"5%\",\n  background: {\n    value: \"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\",\n    writable: true\n  }\n};\n\nclass SwipeCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      score: Math.floor(Math.random() * 100) + 20\n    };\n  }\n\n  renderCards() {\n    const colors = [\"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\", \"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\", \"linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 50%, rgba(252,176,69,1) 100%)\", \"radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)\"];\n    let random_color = Math.floor(Math.random() * colors.length) + 0;\n    console.log(colors[random_color]);\n    cardStyle.background = colors[random_color];\n    return dataset.map(d => {\n      console.log(dataset);\n      return React.createElement(Card, {\n        style: cardStyle,\n        key: this.state.data.id,\n        onSwipeRight: this.refresh.bind(this),\n        data: d,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.state.data.quote));\n    });\n  }\n\n  onSwipe(data) {}\n\n  onSwipeRight(data) {}\n\n  refresh() {\n    let random;\n    let points = Math.floor(Math.random() * 100) + 20;\n    const self = this;\n    d3.csv(data).then((data, i) => {\n      dataset.push({\n        id: i,\n        quote: data['quote']\n      });\n      random = Math.floor(Math.random() * data.length) + 0;\n      self.setState({\n        data: data[random]\n      });\n    });\n\n    function callback(data) {\n      this.setState({\n        data: data[random]\n      });\n    }\n\n    d3.csv(data).then(callback.bind(this));\n    this.setState({\n      score: this.state.score += points\n    });\n    console.log(this.state.score);\n  }\n\n  componentDidMount() {\n    let random;\n    const self = this;\n    d3.csv(data).then(data => {\n      dataset.push(data);\n      random = Math.floor(Math.random() * data.length) + 0;\n      self.setState({\n        data: data[random]\n      });\n    });\n\n    function callback(data) {\n      this.setState({\n        data: data[random]\n      });\n    }\n\n    d3.csv(data).then(callback.bind(this));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.score)), React.createElement(CardWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.renderCards()));\n  }\n\n}\n\nexport default SwipeCard;","map":{"version":3,"sources":["/Users/emilychu/Desktop/goodvibes/src/components/Swipe-Card.js"],"names":["React","Card","CardWrapper","d3","data","levels","dataset","wrapperStyle","backgroundColor","cardStyle","width","display","justifyContent","alignItems","padding","background","value","writable","SwipeCard","Component","state","score","Math","floor","random","renderCards","colors","random_color","length","console","log","map","d","id","refresh","bind","quote","onSwipe","onSwipeRight","points","self","csv","then","i","push","setState","callback","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,uBAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,IAAIC,OAAO,GAAC,EAAZ;AACI,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE;AADE,CAArB;AAGA,MAAMC,SAAS,GAAG;AAChBD,EAAAA,eAAe,EAAE,SADD;AAEhBE,EAAAA,KAAK,EAAC,MAFU;AAGhBC,EAAAA,OAAO,EAAC,MAHQ;AAIhBC,EAAAA,cAAc,EAAC,QAJC;AAKhBC,EAAAA,UAAU,EAAC,QALK;AAMhBC,EAAAA,OAAO,EAAC,IANQ;AAOhBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAC,wEADI;AAEVC,IAAAA,QAAQ,EAAC;AAFC;AAPI,CAAlB;;AAYJ,MAAMC,SAAN,SAAwBlB,KAAK,CAACmB,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,KADsC,GAC9B;AACNhB,MAAAA,IAAI,EAAE,EADA;AAENiB,MAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,IAA8B;AAF/B,KAD8B;AAAA;;AAKtCC,EAAAA,WAAW,GAAG;AACZ,UAAMC,MAAM,GAAG,CAAC,wEAAD,EACf,wEADe,EAEf,+FAFe,EAGf,2EAHe,CAAf;AAIA,QAAIC,YAAY,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcE,MAAM,CAACE,MAAhC,IAAwC,CAA3D;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACC,YAAD,CAAlB;AACAlB,IAAAA,SAAS,CAACM,UAAV,GAAqBW,MAAM,CAACC,YAAD,CAA3B;AAEA,WAAOrB,OAAO,CAACyB,GAAR,CAAaC,CAAD,IAAO;AACxBH,MAAAA,OAAO,CAACC,GAAR,CAAYxB,OAAZ;AACA,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAEG,SADT;AAEE,QAAA,GAAG,EAAE,KAAKW,KAAL,CAAWhB,IAAX,CAAgB6B,EAFvB;AAGE,QAAA,YAAY,EAAE,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAHhB;AAIE,QAAA,IAAI,EAAEH,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKZ,KAAL,CAAWhB,IAAX,CAAgBgC,KAArB,CALJ,CADF;AASD,KAXM,CAAP;AAYD;;AACDC,EAAAA,OAAO,CAACjC,IAAD,EAAO,CACb;;AACDkC,EAAAA,YAAY,CAAClC,IAAD,EAAO,CAClB;;AAED8B,EAAAA,OAAO,GAAG;AACR,QAAIV,MAAJ;AACA,QAAIe,MAAM,GAAIjB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,IAA8B,EAA5C;AACA,UAAMgB,IAAI,GAAG,IAAb;AAEArC,IAAAA,EAAE,CAACsC,GAAH,CAAOrC,IAAP,EAAasC,IAAb,CAAkB,CAACtC,IAAD,EAAMuC,CAAN,KAAW;AAC7BrC,MAAAA,OAAO,CAACsC,IAAR,CAAa;AACXX,QAAAA,EAAE,EAACU,CADQ;AAEXP,QAAAA,KAAK,EAAChC,IAAI,CAAC,OAAD;AAFC,OAAb;AAIAoB,MAAAA,MAAM,GAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcpB,IAAI,CAACwB,MAA9B,IAAsC,CAA/C;AACEY,MAAAA,IAAI,CAACK,QAAL,CAAc;AAAEzC,QAAAA,IAAI,EAAEA,IAAI,CAACoB,MAAD;AAAZ,OAAd;AACD,KAPD;;AASA,aAASsB,QAAT,CAAkB1C,IAAlB,EAAwB;AACtB,WAAKyC,QAAL,CAAc;AAAEzC,QAAAA,IAAI,EAAEA,IAAI,CAACoB,MAAD;AAAZ,OAAd;AACD;;AAEDrB,IAAAA,EAAE,CAACsC,GAAH,CAAOrC,IAAP,EAAasC,IAAb,CAAkBI,QAAQ,CAACX,IAAT,CAAc,IAAd,CAAlB;AAEA,SAAKU,QAAL,CAAc;AAACxB,MAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,IAAmBkB;AAA3B,KAAd;AAEAV,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWC,KAAvB;AACD;;AAEH0B,EAAAA,iBAAiB,GAAG;AAClB,QAAIvB,MAAJ;AACA,UAAMgB,IAAI,GAAG,IAAb;AAEArC,IAAAA,EAAE,CAACsC,GAAH,CAAOrC,IAAP,EAAasC,IAAb,CAAmBtC,IAAD,IAAS;AAC3BE,MAAAA,OAAO,CAACsC,IAAR,CAAaxC,IAAb;AACAoB,MAAAA,MAAM,GAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcpB,IAAI,CAACwB,MAA9B,IAAsC,CAA/C;AACEY,MAAAA,IAAI,CAACK,QAAL,CAAc;AAAEzC,QAAAA,IAAI,EAAEA,IAAI,CAACoB,MAAD;AAAZ,OAAd;AACD,KAJD;;AAMA,aAASsB,QAAT,CAAkB1C,IAAlB,EAAwB;AACtB,WAAKyC,QAAL,CAAc;AAAEzC,QAAAA,IAAI,EAAEA,IAAI,CAACoB,MAAD;AAAZ,OAAd;AACD;;AAEDrB,IAAAA,EAAE,CAACsC,GAAH,CAAOrC,IAAP,EAAasC,IAAb,CAAkBI,QAAQ,CAACX,IAAT,CAAc,IAAd,CAAlB;AACC;;AAEDa,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAK5B,KAAL,CAAWC,KAAhB,CADF,CADF,EAIC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKI,WAAL,EADF,CAJD,CADF;AAUD;;AArFqC;;AAwFxC,eAAeP,SAAf","sourcesContent":["import React from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport * as d3 from \"d3\";\nimport data from './../data/data.csv';\nimport levels from './../data/levels.csv';\n\nlet dataset=[]\n    const wrapperStyle = {\n      backgroundColor: \"transparent\"\n    }\n    const cardStyle = {\n      backgroundColor: \"#f2f2f2\",\n      width:\"100%\",\n      display:\"flex\",\n      justifyContent:\"center\",\n      alignItems:\"center\",\n      padding:\"5%\",\n      background: {\n        value:\"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\",\n        writable:true}\n    }\n\nclass SwipeCard extends React.Component {\n  state = {\n    data: [],\n    score: Math.floor(Math.random()*100)+20\n  };\n  renderCards() {\n    const colors = [\"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\", \n    \"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\",\n    \"linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 50%, rgba(252,176,69,1) 100%)\",\n    \"radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)\"]\n    let random_color = Math.floor(Math.random()*colors.length)+0\n    console.log(colors[random_color])\n    cardStyle.background=colors[random_color]\n\n    return dataset.map((d) => {\n      console.log(dataset)\n      return(\n        <Card\n          style={cardStyle}\n          key={this.state.data.id}\n          onSwipeRight={this.refresh.bind(this)}\n          data={d}>\n            <h1>{this.state.data.quote}</h1>\n        </Card>\n      );\n    });\n  }\n  onSwipe(data) {\n  }\n  onSwipeRight(data) {\n  }\n\n  refresh() {\n    let random;\n    let points =  Math.floor(Math.random()*100)+20\n    const self = this;\n\n    d3.csv(data).then((data,i)=> {\n    dataset.push({\n      id:i,\n      quote:data['quote']\n    })\n    random = Math.floor(Math.random()*data.length)+0\n      self.setState({ data: data[random] });\n    });\n\n    function callback(data) {\n      this.setState({ data: data[random] });\n    }\n\n    d3.csv(data).then(callback.bind(this));\n\n    this.setState({score: this.state.score +=points})\n\n    console.log(this.state.score)\n  }\n\ncomponentDidMount() {\n  let random;\n  const self = this;\n\n  d3.csv(data).then((data)=> {\n  dataset.push(data)\n  random = Math.floor(Math.random()*data.length)+0\n    self.setState({ data: data[random] });\n  });\n\n  function callback(data) {\n    this.setState({ data: data[random] });\n  }\n\n  d3.csv(data).then(callback.bind(this));\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <div className=\"score\">\n          <h2>{this.state.score}</h2>\n        </div>\n       <CardWrapper>\n        {this.renderCards()}\n      </CardWrapper>\n      </React.Fragment>\n      )\n  }\n}\n\nexport default SwipeCard"]},"metadata":{},"sourceType":"module"}