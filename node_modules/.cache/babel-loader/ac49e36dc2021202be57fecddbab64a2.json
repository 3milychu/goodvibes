{"ast":null,"code":"var _jsxFileName = \"/Users/emilychu/Desktop/goodvibes/src/components/Swipe-Card.js\";\nimport React from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport * as d3 from \"d3\";\nimport data from './../data/data.csv';\nimport levels from './../data/levels.csv';\nlet dataset = [];\nconst wrapperStyle = {\n  backgroundColor: \"transparent\",\n  height: \"60vh\",\n  marginBottom: \"5%\"\n};\nconst colors = [\"f15a22\", \"ab4a9c\", \"0083ca\", \"2e3192\", \"ff4469\", \"6279ff\", \"ffcbb5\", \"998783\", \"edb86c\", \"ed6d6c\", \"4bba8d\", \"a0597e\", \"b3e1ed\", \"19c2ed\", \"54ceed\", \"22c1c3\", \"fdbb2d\"];\n\nclass SwipeCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      score: Math.floor(Math.random() * 100) + 20,\n      color: \"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n    };\n  }\n\n  renderCards() {\n    const self = this;\n    const cardStyle = {\n      backgroundColor: \"#f2f2f2\",\n      width: \"100%\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: \"5%\",\n      background: this.state.color,\n      color: \"white\",\n      height: \"60%\",\n      borderRadius: \"1em\"\n    };\n    return dataset.map(d => {\n      return React.createElement(Card, {\n        style: cardStyle,\n        key: this.state.data.key,\n        onSwipeRight: this.refresh.bind(this),\n        data: d,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.state.data.quote));\n    });\n  }\n\n  onSwipe(data) {}\n\n  onSwipeRight(data) {}\n\n  refresh() {\n    let random;\n    let points = Math.floor(Math.random() * 100) + 20;\n    const self = this;\n    d3.csv(data).then((data, i) => {\n      dataset.push({\n        key: i,\n        quote: data['quote']\n      });\n      random = Math.floor(Math.random() * data.length) + 0;\n      self.setState({\n        data: data[random]\n      });\n    });\n\n    function callback(data) {\n      this.setState({\n        data: data[random]\n      });\n    }\n\n    d3.csv(data).then(callback.bind(this));\n    this.setState({\n      score: this.state.score += points\n    });\n    console.log(this.state.score);\n    let random_color1 = Math.floor(Math.random() * colors.length) + 0;\n    let random_color2 = Math.floor(Math.random() * colors.length) + 0;\n    let new_color = \"linear-gradient(73deg, #\" + colors[random_color1] + \" 0%, #\" + colors[random_color2] + \" 100%)\";\n    console.log(new_color);\n    this.setState({\n      color: new_color\n    });\n  }\n\n  componentDidMount() {\n    let random;\n    const self = this;\n    d3.csv(data).then(data => {\n      dataset.push(data);\n      random = Math.floor(Math.random() * data.length) + 0;\n      self.setState({\n        data: data[random]\n      });\n    });\n\n    function callback(data) {\n      this.setState({\n        data: data[random]\n      });\n    }\n\n    d3.csv(data).then(callback.bind(this));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.state.score)), React.createElement(CardWrapper, {\n      style: wrapperStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.renderCards()));\n  }\n\n}\n\nexport default SwipeCard;","map":{"version":3,"sources":["/Users/emilychu/Desktop/goodvibes/src/components/Swipe-Card.js"],"names":["React","Card","CardWrapper","d3","data","levels","dataset","wrapperStyle","backgroundColor","height","marginBottom","colors","SwipeCard","Component","state","score","Math","floor","random","color","renderCards","self","cardStyle","width","display","justifyContent","alignItems","padding","background","borderRadius","map","d","key","refresh","bind","quote","onSwipe","onSwipeRight","points","csv","then","i","push","length","setState","callback","console","log","random_color1","random_color2","new_color","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,uBAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,IAAIC,OAAO,GAAC,EAAZ;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,aADE;AAEnBC,EAAAA,MAAM,EAAC,MAFY;AAGnBC,EAAAA,YAAY,EAAC;AAHM,CAArB;AAKA,MAAMC,MAAM,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,QAAnD,EACf,QADe,EACL,QADK,EACK,QADL,EACc,QADd,EACwB,QADxB,EACkC,QADlC,EAC4C,QAD5C,EACsD,QADtD,EACgE,QADhE,EAEf,QAFe,EAEL,QAFK,CAAf;;AAIA,MAAMC,SAAN,SAAwBZ,KAAK,CAACa,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,KADsC,GAC9B;AACNV,MAAAA,IAAI,EAAE,EADA;AAENW,MAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,IAA8B,EAF/B;AAGNC,MAAAA,KAAK,EAAC;AAHA,KAD8B;AAAA;;AAMtCC,EAAAA,WAAW,GAAG;AACZ,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMC,SAAS,GAAG;AAChBd,MAAAA,eAAe,EAAE,SADD;AAEhBe,MAAAA,KAAK,EAAC,MAFU;AAGhBC,MAAAA,OAAO,EAAC,MAHQ;AAIhBC,MAAAA,cAAc,EAAC,QAJC;AAKhBC,MAAAA,UAAU,EAAC,QALK;AAMhBC,MAAAA,OAAO,EAAC,IANQ;AAOhBC,MAAAA,UAAU,EAAE,KAAKd,KAAL,CAAWK,KAPP;AAQhBA,MAAAA,KAAK,EAAC,OARU;AAShBV,MAAAA,MAAM,EAAC,KATS;AAUhBoB,MAAAA,YAAY,EAAC;AAVG,KAAlB;AAaA,WAAOvB,OAAO,CAACwB,GAAR,CAAaC,CAAD,IAAO;AACxB,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAET,SADT;AAEE,QAAA,GAAG,EAAE,KAAKR,KAAL,CAAWV,IAAX,CAAgB4B,GAFvB;AAGE,QAAA,YAAY,EAAE,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAHhB;AAIE,QAAA,IAAI,EAAEH,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKjB,KAAL,CAAWV,IAAX,CAAgB+B,KAArB,CALJ,CADF;AASD,KAVM,CAAP;AAWD;;AACDC,EAAAA,OAAO,CAAChC,IAAD,EAAO,CACb;;AACDiC,EAAAA,YAAY,CAACjC,IAAD,EAAO,CAClB;;AAED6B,EAAAA,OAAO,GAAG;AACR,QAAIf,MAAJ;AACA,QAAIoB,MAAM,GAAItB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,IAA8B,EAA5C;AACA,UAAMG,IAAI,GAAG,IAAb;AAEAlB,IAAAA,EAAE,CAACoC,GAAH,CAAOnC,IAAP,EAAaoC,IAAb,CAAkB,CAACpC,IAAD,EAAMqC,CAAN,KAAW;AAC7BnC,MAAAA,OAAO,CAACoC,IAAR,CAAa;AACXV,QAAAA,GAAG,EAACS,CADO;AAEXN,QAAAA,KAAK,EAAC/B,IAAI,CAAC,OAAD;AAFC,OAAb;AAIAc,MAAAA,MAAM,GAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcd,IAAI,CAACuC,MAA9B,IAAsC,CAA/C;AACEtB,MAAAA,IAAI,CAACuB,QAAL,CAAc;AAAExC,QAAAA,IAAI,EAAEA,IAAI,CAACc,MAAD;AAAZ,OAAd;AACD,KAPD;;AASA,aAAS2B,QAAT,CAAkBzC,IAAlB,EAAwB;AACtB,WAAKwC,QAAL,CAAc;AAAExC,QAAAA,IAAI,EAAEA,IAAI,CAACc,MAAD;AAAZ,OAAd;AACD;;AAEDf,IAAAA,EAAE,CAACoC,GAAH,CAAOnC,IAAP,EAAaoC,IAAb,CAAkBK,QAAQ,CAACX,IAAT,CAAc,IAAd,CAAlB;AAEA,SAAKU,QAAL,CAAc;AAAC7B,MAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,IAAmBuB;AAA3B,KAAd;AAEAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjC,KAAL,CAAWC,KAAvB;AAEA,QAAIiC,aAAa,GAAGhC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcP,MAAM,CAACgC,MAAhC,IAAwC,CAA5D;AACC,QAAIM,aAAa,GAAGjC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcP,MAAM,CAACgC,MAAhC,IAAwC,CAA5D;AACD,QAAIO,SAAS,GAAG,6BAA2BvC,MAAM,CAACqC,aAAD,CAAjC,GAAiD,QAAjD,GAA0DrC,MAAM,CAACsC,aAAD,CAAhE,GAAgF,QAAhG;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACA,SAAKN,QAAL,CAAc;AAACzB,MAAAA,KAAK,EAAE+B;AAAR,KAAd;AACD;;AAEHC,EAAAA,iBAAiB,GAAG;AAClB,QAAIjC,MAAJ;AACA,UAAMG,IAAI,GAAG,IAAb;AAEAlB,IAAAA,EAAE,CAACoC,GAAH,CAAOnC,IAAP,EAAaoC,IAAb,CAAmBpC,IAAD,IAAS;AAC3BE,MAAAA,OAAO,CAACoC,IAAR,CAAatC,IAAb;AACAc,MAAAA,MAAM,GAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcd,IAAI,CAACuC,MAA9B,IAAsC,CAA/C;AACEtB,MAAAA,IAAI,CAACuB,QAAL,CAAc;AAAExC,QAAAA,IAAI,EAAEA,IAAI,CAACc,MAAD;AAAZ,OAAd;AACD,KAJD;;AAMA,aAAS2B,QAAT,CAAkBzC,IAAlB,EAAwB;AACtB,WAAKwC,QAAL,CAAc;AAAExC,QAAAA,IAAI,EAAEA,IAAI,CAACc,MAAD;AAAZ,OAAd;AACD;;AAEDf,IAAAA,EAAE,CAACoC,GAAH,CAAOnC,IAAP,EAAaoC,IAAb,CAAkBK,QAAQ,CAACX,IAAT,CAAc,IAAd,CAAlB;AACC;;AAEDkB,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKtC,KAAL,CAAWC,KAAhB,CADF,CADF,EAIC,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAER,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKa,WAAL,EADF,CAJD,CADF;AAUD;;AAjGqC;;AAoGxC,eAAeR,SAAf","sourcesContent":["import React from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport * as d3 from \"d3\";\nimport data from './../data/data.csv';\nimport levels from './../data/levels.csv';\n\nlet dataset=[]\nconst wrapperStyle = {\n  backgroundColor: \"transparent\",\n  height:\"60vh\",\n  marginBottom:\"5%\"\n}\nconst colors = [\"f15a22\", \"ab4a9c\", \"0083ca\", \"2e3192\", \"ff4469\", \"6279ff\", \n\"ffcbb5\", \"998783\", \"edb86c\",\"ed6d6c\", \"4bba8d\", \"a0597e\", \"b3e1ed\", \"19c2ed\", \"54ceed\", \n\"22c1c3\", \"fdbb2d\"]\n\nclass SwipeCard extends React.Component {\n  state = {\n    data: [],\n    score: Math.floor(Math.random()*100)+20,\n    color:\"linear-gradient(73deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n  };\n  renderCards() {\n    const self = this;\n    const cardStyle = {\n      backgroundColor: \"#f2f2f2\",\n      width:\"100%\",\n      display:\"flex\",\n      justifyContent:\"center\",\n      alignItems:\"center\",\n      padding:\"5%\",\n      background: this.state.color,\n      color:\"white\",\n      height:\"60%\",\n      borderRadius:\"1em\"\n    }\n\n    return dataset.map((d) => {\n      return(\n        <Card\n          style={cardStyle}\n          key={this.state.data.key}\n          onSwipeRight={this.refresh.bind(this)}\n          data={d}>\n            <h1>{this.state.data.quote}</h1>\n        </Card>\n      );\n    });\n  }\n  onSwipe(data) {\n  }\n  onSwipeRight(data) {\n  }\n\n  refresh() {\n    let random;\n    let points =  Math.floor(Math.random()*100)+20\n    const self = this;\n\n    d3.csv(data).then((data,i)=> {\n    dataset.push({\n      key:i,\n      quote:data['quote']\n    })\n    random = Math.floor(Math.random()*data.length)+0\n      self.setState({ data: data[random] });\n    });\n\n    function callback(data) {\n      this.setState({ data: data[random] });\n    }\n\n    d3.csv(data).then(callback.bind(this));\n\n    this.setState({score: this.state.score +=points})\n\n    console.log(this.state.score)\n\n    let random_color1 = Math.floor(Math.random()*colors.length)+0\n     let random_color2 = Math.floor(Math.random()*colors.length)+0\n    let new_color = \"linear-gradient(73deg, #\"+colors[random_color1]+\" 0%, #\"+colors[random_color2]+\" 100%)\"\n    console.log(new_color)\n    this.setState({color: new_color})\n  }\n\ncomponentDidMount() {\n  let random;\n  const self = this;\n\n  d3.csv(data).then((data)=> {\n  dataset.push(data)\n  random = Math.floor(Math.random()*data.length)+0\n    self.setState({ data: data[random] });\n  });\n\n  function callback(data) {\n    this.setState({ data: data[random] });\n  }\n\n  d3.csv(data).then(callback.bind(this));\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <div className=\"score\">\n          <h2>{this.state.score}</h2>\n        </div>\n       <CardWrapper style={wrapperStyle}>\n        {this.renderCards()}\n      </CardWrapper>\n      </React.Fragment>\n      )\n  }\n}\n\nexport default SwipeCard"]},"metadata":{},"sourceType":"module"}